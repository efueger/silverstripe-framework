/**
 * This file contains the default theme definitions for the admin interface.
 * Please put mostly SCSS variable definitions in here,
 * and leave the actual styling to _style.scss and auxilliary files.
 */
/* 16px */
/* 11px */
/* 10px */
/* 2rem; */
/* 1.75rem; */
/* 1.5rem; */
/* 1.25rem; */
/* 20px */
/** -----------------------------------------------
 * Colours
 * ------------------------------------------------ */
/* Keep as solid colours transparent borders wont work in ie */
/* Only for use as shadows as they wont work in older browsers */
/* new in SilverStripe 4 */
/*$color-optional: #a1d2eb !default; */
/** -----------------------------------------------
 * Textures
 * ----------------------------------------------- */
/** -----------------------------------------------
 * Typography.
 * ------------------------------------------------ */
/** -----------------------------------------------
 * Grid Units (px)
 *
 * We have a vertical rhythm that the grid is based off
 * both x (=horizontal) and y (=vertical). All internal padding and
 * margins are scaled to this and accounting for paragraphs
 * ------------------------------------------------ */
/** -----------------------------------------------
 * Application Logo (CMS Logo) Must be 24px x 24px
 * ------------------------------------------------ */
.cms .ss-ui-button {
  background-color: #e6e6e6;
}

.cms .ss-ui-button.ui-state-hover {
  background-color: #f3f3f3;
}

.cms .ss-ui-button.ss-ui-action-constructive {
  background-color: #1F9433;
}

.cms .ss-ui-button.ss-ui-action-constructive.ui-state-hover {
  background-color: #23a93a;
}

.cms .ss-ui-button.ss-gridfield-button-filter {
  background: #55a4d2 url(../../images/icons/filter-icons.png) no-repeat -14px 4px;
}

.ui-state-default,
.ui-widget-content .ui-state-default,
.ui-widget-header .ui-state-default {
  background-image: none;
}

.ss-gridfield-button-filter.ss-ui-button {
  background: #e6e6e6 url(../images/filter-icons.png) no-repeat -40px 6px;
  -webkit-filter: none;
          filter: none;
}

.ss-gridfield-button-filter.ss-ui-button.hover-alike:active {
  background-color: #2e7ead;
  background-position: -15px 7px;
  -webkit-filter: none;
          filter: none;
}

.ss-gridfield-button-filter.ss-ui-button.hover-alike {
  background-color: #338DC1;
  background-position: -16px 6px;
  -webkit-filter: none;
          filter: none;
}

.ss-gridfield-button-reset.ss-ui-button {
  background: #e6e6e6 url(../images/filter-icons.png) no-repeat 8px 5px;
  -webkit-filter: none;
          filter: none;
}

.ss-gridfield-button-reset.ss-ui-button.filtered:hover {
  background: #f00 url(../images/filter-icons.png) no-repeat 8px -17px;
  -webkit-filter: none;
          filter: none;
}

.ss-gridfield-button-reset.ss-ui-button.filtered:active {
  background: #e60000 url(../images/filter-icons.png) no-repeat 9px -16px;
  -webkit-filter: none;
          filter: none;
}

.cms table.ss-gridfield-table tr td {
  border-right: 1px solid #9a9a9a;
}

.cms table.ss-gridfield-table tr th {
  border-right: 1px solid #9a9a9a;
}

.cms table.ss-gridfield-table tr th.main {
  border-top: 1px solid #9a9a9a;
  border-bottom: none;
}

.cms table.ss-gridfield-table tr th.extra {
  border-top: 1px solid #9a9a9a;
  padding-right: 12px;
}

.cms table.ss-gridfield-table td:first-child, .cms table.ss-gridfield-table th:first-child {
  border-left: 1px solid #9a9a9a;
}

.cms .ss-gridfield table.ss-gridfield-table tbody td button {
  border: 0;
  background: none;
}

.cms .cms-content .cms-content-fields .aligned_right_label {
  margin-left: 0;
}

.cms-menu-list li a .icon {
  -webkit-filter: none;
          filter: none;
}

/**
 * DEPRECATED:
 * .cms-content-tools will be removed in 4.0
 * Use .cms-content-filters instead.
 *
 * Fix for model admin filter styling
 */
.ModelAdmin .cms-content-fields .cms-content-tools .cms-panel-content #Form_ImportForm div.file {
  margin: 0px;
}

.ModelAdmin .cms-content-fields .cms-content-tools .cms-panel-content #Form_ImportForm div.file input.file {
  margin-left: -132px;
}

.ModelAdmin .cms-content-fields .cms-content-tools .cms-panel-content #Form_ImportForm div.checkbox {
  padding: 0px;
}

.filter-buttons button.ss-gridfield-button-filter {
  background-position: -18px 4px !important;
}

/* Alternative styles for the switch in old IE */
fieldset.switch-states {
  padding-right: 20px;
}

fieldset.switch-states .switch {
  padding: 0;
  width: 132%;
  left: -32px;
}

fieldset.switch-states .switch label {
  overflow: visible;
  text-overflow: visible;
  white-space: normal;
  padding: 0;
}

fieldset.switch-states .switch label.active {
  color: #fff;
  background-color: #2b9c32;
}

fieldset.switch-states .switch label span {
  display: inline;
  padding: 0 8px;
  overflow: visible;
  text-overflow: visible;
  white-space: wrap;
}

fieldset.switch-states .switch .slide-button {
  display: none;
}

fieldset.switch-states .switch input.state-name {
  margin-left: -20px;
}

/* Hide size controls in IE - they won't work as intended */
.cms-content-controls .preview-size-selector {
  display: none;
}

.cms-panel .cms-panel-content-collapsed {
  position: relative;
  width: 40px;
}

.cms-panel .cms-panel-content-collapsed h2.cms-panel-header, .cms-panel .cms-panel-content-collapsed h3.cms-panel-header {
  zoom: 1;
  position: absolute;
  top: 10px;
  right: 10px;
  -webkit-writing-mode: tb-rl;
      -ms-writing-mode: tb-rl;
          writing-mode: tb-rl;
  float: right;
  z-index: 5000;
}

.cms-content-toolbar .cms-tree-view-modes .checkboxAboveTree {
  margin-right: 1px;
}

/**
 * DEPRECATED:
 * .cms-content-tools will be removed in 4.0
 * Use .cms-content-filters instead.
 */
.cms .cms-content-tools .cms-panel-content .dropdown select {
  width: 152px;
}

.filter-buttons button {
  width: 23px !important;
  height: 23px !important;
}

.filter-buttons button.ss-gridfield-button-close {
  margin-right: -7px !important;
}

.col-buttons {
  width: 18px;
}

/* fix for actions buttons on edit page content overlapping */
.cms-content-actions .ss-ui-buttonset button {
  margin-right: 0;
}

.tree-holder.filtered-list li > a,
.tree-holder.filtered-list li > a:link,
.cms-tree.filtered-list li > a,
.cms-tree.filtered-list li > a:link {
  color: #aaa;
}

.tree-holder.filtered-list li.filtered-item > a,
.tree-holder.filtered-list li.filtered-item > a:link,
.cms-tree.filtered-list li.filtered-item > a,
.cms-tree.filtered-list li.filtered-item > a:link {
  color: #0071c4;
}

.tree-holder.filtered-list li.disabled > a,
.tree-holder.filtered-list li.disabled > a:link, .tree-holder.filtered-list li.edit-disabled > a,
.tree-holder.filtered-list li.edit-disabled > a:link,
.cms-tree.filtered-list li.disabled > a,
.cms-tree.filtered-list li.disabled > a:link,
.cms-tree.filtered-list li.edit-disabled > a,
.cms-tree.filtered-list li.edit-disabled > a:link {
  color: #aaa;
  background: transparent none;
  cursor: default;
}

/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInRoZW1lcy9fZGVmYXVsdC5zY3NzIiwiYm9vdHN0cmFwL192YXJpYWJsZXMuc2NzcyIsIl9pZVNoYXJlZC5zY3NzIiwiaWU4LnNjc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7R0FJRztBQ3VKbUMsVUFBVTtBQUNWLFVBQVU7QUFDVixVQUFVO0FBR2IsV0FBVztBQUNYLGNBQWM7QUFDZCxhQUFhO0FBQ2IsY0FBYztBQWFiLFVBQVU7QUR4SzlDOztzREFFc0Q7QUFvQnRELCtEQUErRDtBQVcvRCxpRUFBaUU7QUFnQjFCLDJCQUEyQjtBQTRCbEUsdUNBQXVDO0FBS3ZDOztxREFFcUQ7QUFJckQ7O3NEQUVzRDtBQUd0RDs7Ozs7O3NEQU1zRDtBQUl0RDs7c0RBRXNEO0FFNUZ0RDtFQUNDLDBCRjhDNkI7Q0VoQzdCOztBQWZEO0VBR0UsMEJBQXdCO0NBQ3hCOztBQUpGO0VBTUUsMEJGK0NpQztDRTNDakM7O0FBVkY7RUFRRywwQkFBd0I7Q0FDeEI7O0FBVEg7RUFhRSxpRkFBNkQ7Q0FDN0Q7O0FBSUY7OztFQUdDLHVCQUFzQjtDQUN0Qjs7QUFHRDtFQUNDLHdFQUFxRjtFQUNyRixxQkFBWTtVQUFaLGFBQVk7Q0FXWjs7QUFiRDtFQUlFLDBCQUF3QjtFQUN4QiwrQkFBK0I7RUFDL0IscUJBQVk7VUFBWixhQUFZO0NBQ1o7O0FBUEY7RUFTRSwwQkFBMkI7RUFDM0IsK0JBQStCO0VBQy9CLHFCQUFZO1VBQVosYUFBWTtDQUNaOztBQUdGO0VBQ0Msc0VBQW1GO0VBQ25GLHFCQUFZO1VBQVosYUFBWTtDQVNaOztBQVhEO0VBSUUscUVBQXlGO0VBQ3pGLHFCQUFZO1VBQVosYUFBWTtDQUNaOztBQU5GO0VBUUUsd0VBQXFHO0VBQ3JHLHFCQUFZO1VBQVosYUFBWTtDQUNaOztBQUlGO0VBR0csZ0NBQStCO0NBQy9COztBQUpIO0VBTUcsZ0NBQStCO0NBUy9COztBQWZIO0VBUUksOEJBQTZCO0VBQzdCLG9CQUFvQjtDQUNwQjs7QUFWSjtFQVlJLDhCQUE2QjtFQUM3QixvQkFBbUI7Q0FDbkI7O0FBZEo7RUFrQkUsK0JBQThCO0NBQzlCOztBQUlGO0VBR0csVUFBUztFQUNULGlCQUFnQjtDQUNoQjs7QUFLSDtFQUVFLGVBQWM7Q0FDZDs7QUFHRjtFQUNDLHFCQUFZO1VBQVosYUFBWTtDQUNaOztBQUdEOzs7Ozs7R0FNRztBQUNIO0VBR0csWUFBVztDQUlYOztBQVBIO0VBS0ksb0JBQW9CO0NBQ3BCOztBQU5KO0VBU0csYUFBWTtDQUNaOztBQUlIO0VBR0csMENBQTBDO0NBQzFDOztBQUlILGlEQUFpRDtBQUNqRDtFQUNDLG9CQUFvQjtDQTZCcEI7O0FBOUJEO0VBR0UsV0FBVztFQUNYLFlBQVc7RUFDWCxZQUFZO0NBd0JaOztBQTdCRjtFQU9HLGtCQUFpQjtFQUNqQix1QkFBc0I7RUFDdEIsb0JBQW1CO0VBQ25CLFdBQVU7Q0FZVjs7QUF0Qkg7RUFZSSxZQUFXO0VBQ1gsMEJBQTBCO0NBQzFCOztBQWRKO0VBZ0JJLGdCQUFlO0VBQ2YsZUFBYztFQUNkLGtCQUFpQjtFQUNqQix1QkFBc0I7RUFDdEIsa0JBQWlCO0NBQ2pCOztBQXJCSjtFQXdCRyxjQUFhO0NBQ2I7O0FBekJIO0VBMkJHLG1CQUFtQjtDQUNuQjs7QUFHSCw0REFBNEQ7QUFDNUQ7RUFFRSxjQUFhO0NBQ2I7O0FDbExGO0VESEUsbUJBQWtCO0VBQ2xCLFlBQVk7Q0FZWjs7QUNWRjtFRENJLFFBQVE7RUFDUixtQkFBa0I7RUFDbEIsVUFBUztFQUNULFlBQVc7RUFDWCw0QkFBb0I7TUFBcEIsd0JBQW9CO1VBQXBCLG9CQUFvQjtFQUNwQixhQUFZO0VBQ1osY0FBYTtDQUNiOztBQ0hKO0VBR0csa0JBQWlCO0NBQ2pCOztBQUlIOzs7O0dBSUc7QUFDSDtFQUlFLGFBQVk7Q0FDWjs7QUFHRjtFQUVFLHVCQUFzQjtFQUN0Qix3QkFBdUI7Q0FJdkI7O0FBUEY7RUFLRyw4QkFBNkI7Q0FDN0I7O0FBSUg7RUFDQyxZQUFXO0NBQ1g7O0FBRUQsOERBQThEO0FBQzlEO0VBR0csZ0JBQWdCO0NBQ2hCOztBQU1IOzs7O0VBS0csWUhEdUI7Q0dFdkI7O0FBTkg7Ozs7RUFZSSxlSEwwQjtDR00xQjs7QUFiSjs7Ozs7OztFQXFCSSxZSGpCc0I7RUdrQnRCLDZCQUE2QjtFQUM3QixnQkFBZ0I7Q0FDaEIiLCJmaWxlIjoiaWU4LmNzcyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogVGhpcyBmaWxlIGNvbnRhaW5zIHRoZSBkZWZhdWx0IHRoZW1lIGRlZmluaXRpb25zIGZvciB0aGUgYWRtaW4gaW50ZXJmYWNlLlxuICogUGxlYXNlIHB1dCBtb3N0bHkgU0NTUyB2YXJpYWJsZSBkZWZpbml0aW9ucyBpbiBoZXJlLFxuICogYW5kIGxlYXZlIHRoZSBhY3R1YWwgc3R5bGluZyB0byBfc3R5bGUuc2NzcyBhbmQgYXV4aWxsaWFyeSBmaWxlcy5cbiAqL1xuXG5AaW1wb3J0IFwiLi4vYm9vdHN0cmFwL3ZhcmlhYmxlcy5zY3NzXCI7XG5cbi8qKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICogQ29sb3Vyc1xuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tICovXG4kY29sb3ItYmFzZTogI2IwYmVjNyAhZGVmYXVsdDtcbiRjb2xvci13aWRnZXQtYmc6IGxpZ2h0ZW4oJGNvbG9yLWJhc2UsIDIwJSkgIWRlZmF1bHQ7XG5cbi8vIE1lbnUgdGhlbWUgY29sb3Vyc1xuJGNvbG9yLXRoZW1lLWJhc2U6IFx0I2Q4ZTRlYiAhZGVmYXVsdDtcblxuJGNvbG9yLXRoZW1lLWJnOiBcdGxpZ2h0ZW4oJGNvbG9yLXRoZW1lLWJhc2UsIDUlKTtcbiRjb2xvci10aGVtZS1pY29uczogZGFya2VuKCRjb2xvci10aGVtZS1iYXNlLCAyNiUpO1xuJGNvbG9yLXRoZW1lLWFjdGl2ZTogJGNvbG9yLXRoZW1lLWJhc2U7XG5cbi8vIENNUyA0IG1lbnVcbiRiYXNlLW1lbnU6ICNkOGU0ZWI7XG4kYmFzZS1tZW51LWJnOiBsaWdodGVuKCRiYXNlLW1lbnUsNSUpO1xuJGJhc2UtbWVudS1pY29uOiBkYXJrZW4oJGJhc2UtbWVudSwgMjYlKTtcblxuLy9vZmZpY2FsIHNpbHZlcnN0cmlwZSBicmFuZCBjb2xvclxuJGNvbG9yLWJyYW5kLWJnOiAjMDA1YTkzICFkZWZhdWx0O1xuJGNvbG9yLWJyYW5kOiAjNDNjN2Y0ICFkZWZhdWx0O1xuXG4vKiBLZWVwIGFzIHNvbGlkIGNvbG91cnMgdHJhbnNwYXJlbnQgYm9yZGVycyB3b250IHdvcmsgaW4gaWUgKi9cbiRjb2xvci1kYXJrZXItYmc6ICNmMGYyZjQgIWRlZmF1bHQ7XG4kY29sb3ItZGFyay1iZzogIzE0MjEzNiAhZGVmYXVsdDtcbiRjb2xvci1kYXJrLXNlcGFyYXRvcjogIzE5NDM1YyAhZGVmYXVsdDtcbiRjb2xvci1tZWRpdW0tc2VwYXJhdG9yOiAjODA4MDgwICFkZWZhdWx0O1xuJGNvbG9yLXNlcGFyYXRvcjogI0MxQzdDQyAhZGVmYXVsdDsgLy8gVmVydGljYWwgZGl2aWRlcnNcbiRjb2xvci1saWdodC1zZXBhcmF0b3I6ICNEMkQ1RDggIWRlZmF1bHQ7IC8vIEhvcmlvbnRhbCBkaXZpZGVyc1xuXG4kY29sb3ItdGFiOiAjZDlkOWQ5ICFkZWZhdWx0O1xuJGNvbG9yLWRhcmstZ3JleTogIzdCOEM5MSAhZGVmYXVsdDtcblxuLyogT25seSBmb3IgdXNlIGFzIHNoYWRvd3MgYXMgdGhleSB3b250IHdvcmsgaW4gb2xkZXIgYnJvd3NlcnMgKi9cbiRjb2xvci1zaGFkb3ctbGlnaHQ6IHJnYmEoMjAxLCAyMDUsIDIwNiwgMC44KSAhZGVmYXVsdDtcbiRjb2xvci1zaGFkb3ctZGFyazogcmdiYSgxMDcsIDEyMCwgMTIzLCAwLjUpICFkZWZhdWx0O1xuJGNvbG9yLXNoYWRvdy1ibGFjazogcmdiYSgwLCAwLCAwLCAwLjYpICFkZWZhdWx0O1xuJGNvbG9yLXNoYWRvdy1ibGFja2VyOiByZ2JhKDAsIDAsIDAsIDAuOSkgIWRlZmF1bHQ7XG4kYm94LXNoYWRvdy1zaGluZTogcmdiYSgyNDgsIDI0OCwgMjQ4LCAwLjkpO1xuJGJveC1zaGFkb3ctc2hpbmUtbWluaW1hbDogcmdiYSgyNDUsIDI0NSwgMjQ1LCAwLjgpO1xuXG4kY29sb3ItaGlnaGxpZ2h0OiAjRkZGRjY2ICFkZWZhdWx0O1xuJGNvbG9yLWhpZ2hsaWdodC1vcGFjaXR5OiByZ2JhKDI1NSwgMjU1LCAxMDIsIDAuMykgIWRlZmF1bHQ7XG5cbiRjb2xvci1tZW51LWJ1dHRvbjogIzMzOERDMSAhZGVmYXVsdDtcbiRjb2xvci1tZW51LWJhY2tncm91bmQ6ICNjNmQ3ZGYgIWRlZmF1bHQ7XG4kY29sb3ItbWVudS1ib3JkZXI6ICM4Yzk5YTEgIWRlZmF1bHQ7XG4kY29sb3ItcGFuZWwtYmFja2dyb3VuZDogI2M2ZDdkZiAhZGVmYXVsdDtcblxuJGNvbG9yLXRleHQtZGVmYXVsdDogIzRmNTg2MSAhZGVmYXVsdDsgLyogbmV3IGluIFNpbHZlclN0cmlwZSA0ICovXG4kY29sb3ItdGV4dDogIzY2NzI3ZCAhZGVmYXVsdDtcbiRjb2xvci10ZXh0LWxpZ2h0OiB3aGl0ZSAhZGVmYXVsdDtcbiRjb2xvci10ZXh0LWxpZ2h0LWxpbms6IHdoaXRlICFkZWZhdWx0O1xuJGNvbG9yLXRleHQtZGlzYWJsZWQ6ICNhYWEgIWRlZmF1bHQ7XG4kY29sb3ItdGV4dC1kYXJrOiAjMWYxZjFmICFkZWZhdWx0O1xuJGNvbG9yLXRleHQtZGFyay1saW5rOiAjM0VCQUUwICFkZWZhdWx0O1xuJGNvbG9yLXRleHQtYmx1ZS1saW5rOiAjMDA3MWM0ICFkZWZhdWx0O1xuJGNvbG9yLXRleHQtc2hhZG93OiB3aGl0ZSAhZGVmYXVsdDtcblxuXG4kY29sb3ItYnV0dG9uLWdlbmVyaWM6ICNlNmU2ZTYgIWRlZmF1bHQ7XG4kY29sb3ItYnV0dG9uLWdlbmVyaWMtYm9yZGVyOiAjZDBkM2Q1ICFkZWZhdWx0O1xuXG4kY29sb3ItYnV0dG9uLWhpZ2hsaWdodDogI2U2ZTZlNiAhZGVmYXVsdDtcbiRjb2xvci1idXR0b24taGlnaGxpZ2h0LWJvcmRlcjogIzcwODI4NCAhZGVmYXVsdDtcblxuJGNvbG9yLWJ1dHRvbi1jb25zdHJ1Y3RpdmU6ICMxRjk0MzMgIWRlZmF1bHQ7XG4kY29sb3ItYnV0dG9uLWNvbnN0cnVjdGl2ZS1ib3JkZXI6ICMxRjk0MzMgIWRlZmF1bHQ7XG5cbiRjb2xvci1idXR0b24tZGVzdHJ1Y3RpdmU6ICNmMDAgIWRlZmF1bHQ7XG5cbiRjb2xvci1idXR0b24tZGlzYWJsZWQ6ICNlZWVkZWQgIWRlZmF1bHQ7XG5cbiRjb2xvci1ub3RpY2U6ICM5M0NERTggIWRlZmF1bHQ7XHRcdC8vIGJsdWVcbiRjb2xvci13YXJuaW5nOiAjRTlEMTA0ICFkZWZhdWx0O1x0XHQvLyB5ZWxsb3dcbiRjb2xvci1lcnJvcjogI2U2ODI4OCAhZGVmYXVsdDtcdFx0XHQvLyByZWRcbiRjb2xvci1nb29kOiAjNzJjMzRiICFkZWZhdWx0O1x0XHRcdC8vIGdyZWVuXG4vKiRjb2xvci1vcHRpb25hbDogI2ExZDJlYiAhZGVmYXVsdDsgKi9cdC8vIG9yYW5nZVxuXG4kY29sb3ItY21zLWJhdGNoYWN0aW9ucy1tZW51LWJhY2tncm91bmQ6ICNmNWY1ZjUgIWRlZmF1bHQ7XG4kY29sb3ItY21zLWJhdGNoYWN0aW9ucy1tZW51LXNlbGVjdGVkLWJhY2tncm91bmQ6ICNmZmZjZGMgIWRlZmF1bHQ7XG5cbi8qKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICogVGV4dHVyZXNcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tICovXG4kdGFiLXBhbmVsLXRleHR1cmUtY29sb3I6ICNmNmY3ZjggIWRlZmF1bHQ7XG4kdGFiLXBhbmVsLXRleHR1cmUtYmFja2dyb3VuZDogJHRhYi1wYW5lbC10ZXh0dXJlLWNvbG9yIHVybCguLi9pbWFnZXMvdGV4dHVyZXMvYmdfY21zX21haW5fY29udGVudC5wbmcpIHJlcGVhdCB0b3AgbGVmdCAhZGVmYXVsdDtcblxuLyoqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKiBUeXBvZ3JhcGh5LlxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tICovXG4kZm9udC1mYW1pbHk6IEFyaWFsLCBzYW5zLXNlcmlmICFkZWZhdWx0O1xuXG4vKiogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqIEdyaWQgVW5pdHMgKHB4KVxuICpcbiAqIFdlIGhhdmUgYSB2ZXJ0aWNhbCByaHl0aG0gdGhhdCB0aGUgZ3JpZCBpcyBiYXNlZCBvZmZcbiAqIGJvdGggeCAoPWhvcml6b250YWwpIGFuZCB5ICg9dmVydGljYWwpLiBBbGwgaW50ZXJuYWwgcGFkZGluZyBhbmRcbiAqIG1hcmdpbnMgYXJlIHNjYWxlZCB0byB0aGlzIGFuZCBhY2NvdW50aW5nIGZvciBwYXJhZ3JhcGhzXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gKi9cbiRncmlkLXk6IDhweCAhZGVmYXVsdDtcbiRncmlkLXg6IDhweCAhZGVmYXVsdDtcblxuLyoqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKiBBcHBsaWNhdGlvbiBMb2dvIChDTVMgTG9nbykgTXVzdCBiZSAyNHB4IHggMjRweFxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tICovXG4kYXBwbGljYXRpb24tbG9nby1zbWFsbDogdXJsKFwiLi4vaW1hZ2VzL2xvZ29fc21hbGwucG5nXCIpICFkZWZhdWx0O1xuJGFwcGxpY2F0aW9uLWxvZ28tc21hbGwtMng6IHVybChcIi4uL2ltYWdlcy9sb2dvX3NtYWxsQDJ4LnBuZ1wiKSAhZGVmYXVsdDtcbiIsIi8vIFZhcmlhYmxlc1xuLy9cbi8vIFRoaXMgZmlsZSBjb250YWlucyB0aGUga2V5cyBmb3IgYm9vdHN0cmFwIHZhcmlhYmxlcywgdGhlIGNvbW1lbnRlZCBjb2RlIGlzIGJvb3RzdHJhcCdzIGRlZmF1bHQgdmFsdWVzLlxuLy8gVW5jb21tZW50IGNvZGUgd2hlbiB5b3UgY2hhbmdlIHRoZSB2YWx1ZXMgb2YgYSB2YXJpYWJsZS5cblxuXG4vLyBUYWJsZSBvZiBDb250ZW50c1xuLy9cbi8vIENvbG9yc1xuLy8gT3B0aW9uc1xuLy8gU3BhY2luZ1xuLy8gQm9keVxuLy8gTGlua3Ncbi8vIEdyaWQgYnJlYWtwb2ludHNcbi8vIEdyaWQgY29udGFpbmVyc1xuLy8gR3JpZCBjb2x1bW5zXG4vLyBGb250c1xuLy8gQ29tcG9uZW50c1xuXG4vLyBHZW5lcmFsIHZhcmlhYmxlIHN0cnVjdHVyZVxuLy9cbi8vIFZhcmlhYmxlIGZvcm1hdCBzaG91bGQgZm9sbG93IHRoZSBgJGNvbXBvbmVudC1tb2RpZmllci1zdGF0ZS1wcm9wZXJ0eWAgb3JkZXIuXG5cblxuLy8gQ29sb3JzXG4vL1xuLy8gR3JheXNjYWxlIGFuZCBicmFuZCBjb2xvcnMgZm9yIHVzZSBhY3Jvc3MgQm9vdHN0cmFwLlxuXG4kZ3JheS1kYXJrOiAgICAgICAgICAgICAgICAgIzRmNTg2MTtcbiRncmF5OiAgICAgICAgICAgICAgICAgICAgICAjNTU1OTVjO1xuJGdyYXktbGlnaHQ6ICAgICAgICAgICAgICAgICNkM2Q5ZGQ7IFxuJGdyYXktbGlnaHRlcjogICAgICAgICAgICAgICNlOGU5ZWE7XG4vLyAkZ3JheS1saWdodGVzdDogICAgICAgICAgICAgI2Y3ZjdmOTtcbi8vIFxuJGJyYW5kLXByaW1hcnk6ICAgICAgICAgICAgICMyOWFiZTI7IC8vIzAyNzVkODtcbiRicmFuZC1zdWNjZXNzOiAgICAgICAgICAgICAjM2ZhMTQyO1xuLy8gJGJyYW5kLWluZm86ICAgICAgICAgICAgICAgICM1YmMwZGU7XG4vLyAkYnJhbmQtd2FybmluZzogICAgICAgICAgICAgI2YwYWQ0ZTtcbiRicmFuZC1kYW5nZXI6ICAgICAgICAgICAgICAjRDQwNDA0O1xuXG5cbi8vIE9wdGlvbnNcbi8vXG4vLyBRdWlja2x5IG1vZGlmeSBnbG9iYWwgc3R5bGluZyBieSBlbmFibGluZyBvciBkaXNhYmxpbmcgb3B0aW9uYWwgZmVhdHVyZXMuXG5cbi8vICRlbmFibGUtZmxleDogICAgICAgICAgICAgICBmYWxzZTtcbi8vICRlbmFibGUtcm91bmRlZDogICAgICAgICAgICB0cnVlO1xuLy8gJGVuYWJsZS1zaGFkb3dzOiAgICAgICAgICAgIGZhbHNlO1xuLy8gJGVuYWJsZS1ncmFkaWVudHM6ICAgICAgICAgIGZhbHNlO1xuLy8gJGVuYWJsZS10cmFuc2l0aW9uczogICAgICAgIGZhbHNlO1xuLy8gJGVuYWJsZS1ob3Zlci1tZWRpYS1xdWVyeTogIGZhbHNlO1xuLy8gJGVuYWJsZS1ncmlkLWNsYXNzZXM6ICAgICAgIHRydWU7XG5cblxuLy8gU3BhY2luZ1xuLy9cbi8vIENvbnRyb2wgdGhlIGRlZmF1bHQgc3R5bGluZyBvZiBtb3N0IEJvb3RzdHJhcCBlbGVtZW50cyBieSBtb2RpZnlpbmcgdGhlc2Vcbi8vIHZhcmlhYmxlcy4gTW9zdGx5IGZvY3VzZWQgb24gc3BhY2luZy5cblxuJHNwYWNlcjogICAgICAgICAgICAgICAgICAgICAxcmVtO1xuJHNwYWNlci14OiAgICAgICAgICAgICAgICAgICAkc3BhY2VyO1xuJHNwYWNlci15OiAgICAgICAgICAgICAgICAgICAkc3BhY2VyO1xuJHNwYWNlcnM6IChcbiAgMDogKFxuICAgIHg6ICAgMCxcbiAgICB5OiAgIDBcbiAgKSxcbiAgMTogKFxuICAgIHg6ICAgJHNwYWNlci14LFxuICAgIHk6ICAgJHNwYWNlci15XG4gICksXG4gIDI6IChcbiAgICB4OiAgICgkc3BhY2VyLXggKiAxLjUpLFxuICAgIHk6ICAgKCRzcGFjZXIteSAqIDEuNSlcbiAgKSxcbiAgMzogKFxuICAgIHg6ICAgKCRzcGFjZXIteCAqIDMpLFxuICAgIHk6ICAgKCRzcGFjZXIteSAqIDMpXG4gIClcbik7XG4kYm9yZGVyLXdpZHRoOiAgICAgICAgICAgICAgIDFweDtcblxuXG4vLyBCb2R5XG4vL1xuLy8gU2V0dGluZ3MgZm9yIHRoZSBgPGJvZHk+YCBlbGVtZW50LlxuXG4kYm9keS1iZzogICAgICAgICAgICAgICAgICAgICNmNmY3Zjg7XG4kYm9keS1jb2xvcjogICAgICAgICAgICAgICAgICRncmF5LWRhcms7XG4kYm9keS1jb2xvci1saWdodDogICAgICAgICAgIGxpZ2h0ZW4oJGJvZHktY29sb3IsMTApO1xuJGJvZHktY29sb3ItbGlnaHRlcjogICAgICAgICBsaWdodGVuKCRib2R5LWNvbG9yLDIwKTtcblxuXG4vLyBMaW5rc1xuLy9cbi8vIFN0eWxlIGFuY2hvciBlbGVtZW50cy5cblxuJGxpbmstY29sb3I6ICAgICAgICAgICAgICAgICAjMDA3MWM0O1xuJGxpbmstZGVjb3JhdGlvbjogICAgICAgICAgICBub25lO1xuJGxpbmstaG92ZXItY29sb3I6ICAgICAgICAgICBkYXJrZW4oJGxpbmstY29sb3IsIDE1JSk7XG4kbGluay1ob3Zlci1kZWNvcmF0aW9uOiAgICAgIHVuZGVybGluZTtcblxuXG4vLyBHcmlkIGJyZWFrcG9pbnRzXG4vL1xuLy8gRGVmaW5lIHRoZSBtaW5pbXVtIGFuZCBtYXhpbXVtIGRpbWVuc2lvbnMgYXQgd2hpY2ggeW91ciBsYXlvdXQgd2lsbCBjaGFuZ2UsXG4vLyBhZGFwdGluZyB0byBkaWZmZXJlbnQgc2NyZWVuIHNpemVzLCBmb3IgdXNlIGluIG1lZGlhIHF1ZXJpZXMuXG5cbiRncmlkLWJyZWFrcG9pbnRzOiAoXG4gIC8vIEV4dHJhIHNtYWxsIHNjcmVlbiAvIHBob25lXG4gIHhzOiAwLFxuICAvLyBTbWFsbCBzY3JlZW4gLyBwaG9uZVxuICBzbTogNTQ0cHgsXG4gIC8vIE1lZGl1bSBzY3JlZW4gLyB0YWJsZXRcbiAgbWQ6IDc2OHB4LFxuICAvLyBMYXJnZSBzY3JlZW4gLyBkZXNrdG9wXG4gIGxnOiA5OTJweCxcbiAgLy8gRXh0cmEgbGFyZ2Ugc2NyZWVuIC8gd2lkZSBkZXNrdG9wXG4gIHhsOiAxMjAwcHhcbik7XG5cblxuLy8gR3JpZCBjb250YWluZXJzXG4vL1xuLy8gRGVmaW5lIHRoZSBtYXhpbXVtIHdpZHRoIG9mIGAuY29udGFpbmVyYCBmb3IgZGlmZmVyZW50IHNjcmVlbiBzaXplcy5cblxuJGNvbnRhaW5lci1tYXgtd2lkdGhzOiAoXG4gIHNtOiA1NzZweCxcbiAgbWQ6IDcyMHB4LFxuICBsZzogOTQwcHgsXG4gIHhsOiAxMTQwcHhcbik7XG5cblxuLy8gR3JpZCBjb2x1bW5zXG4vL1xuLy8gU2V0IHRoZSBudW1iZXIgb2YgY29sdW1ucyBhbmQgc3BlY2lmeSB0aGUgd2lkdGggb2YgdGhlIGd1dHRlcnMuXG5cbi8vICRncmlkLWNvbHVtbnM6ICAgICAgICAgICAgICAgMTI7XG4vLyAkZ3JpZC1ndXR0ZXItd2lkdGg6ICAgICAgICAgIDEuODc1cmVtOyAvLyAzMHB4XG5cblxuLy8gVHlwb2dyYXBoeVxuLy9cbi8vIEZvbnQsIGxpbmUtaGVpZ2h0LCBhbmQgY29sb3IgZm9yIGJvZHkgdGV4dCwgaGVhZGluZ3MsIGFuZCBtb3JlLlxuXG4kZm9udC1mYW1pbHktc2Fucy1zZXJpZjogICAgIFwiSGVsdmV0aWNhIE5ldWVcIiwgSGVsdmV0aWNhLCBBcmlhbCwgc2Fucy1zZXJpZjtcbiRmb250LWZhbWlseS1zZXJpZjogICAgICAgICAgR2VvcmdpYSwgXCJUaW1lcyBOZXcgUm9tYW5cIiwgVGltZXMsIHNlcmlmO1xuJGZvbnQtZmFtaWx5LW1vbm9zcGFjZTogICAgICBNZW5sbywgTW9uYWNvLCBDb25zb2xhcywgXCJDb3VyaWVyIE5ld1wiLCBtb25vc3BhY2U7XG4kZm9udC1mYW1pbHktYmFzZTogICAgICAgICAgICRmb250LWZhbWlseS1zYW5zLXNlcmlmO1xuXG4vLyBQaXhlbCB2YWx1ZSB1c2VkIHRvIHJlc3BvbnNpdmVseSBzY2FsZSBhbGwgdHlwb2dyYXBoeS4gQXBwbGllZCB0byB0aGUgYDxodG1sPmAgZWxlbWVudC5cbiRmb250LXNpemUtcm9vdDogICAgICAgICAgICAgMTNweDtcblxuJGZvbnQtc2l6ZS1iYXNlOiAgICAgICAgICAgICAxcmVtO1xuJGZvbnQtc2l6ZS1sZzogICAgICAgICAgICAgICAxLjIzcmVtOyAvKiAxNnB4ICovXG4kZm9udC1zaXplLXNtOiAgICAgICAgICAgICAgIC44NDZyZW07IC8qIDExcHggKi9cbiRmb250LXNpemUteHM6ICAgICAgICAgICAgICAgLjc2OXJlbTsgLyogMTBweCAqL1xuXG4kZm9udC1zaXplLWgxOiAgICAgICAgICAgICAgIDIuNXJlbTtcbiRmb250LXNpemUtaDI6ICAgICAgICAgICAgICAgMThweDsgLyogMnJlbTsgKi9cbiRmb250LXNpemUtaDM6ICAgICAgICAgICAgICAgMTZweDsgLyogMS43NXJlbTsgKi9cbiRmb250LXNpemUtaDQ6ICAgICAgICAgICAgICAgMTRweDsgLyogMS41cmVtOyAqL1xuJGZvbnQtc2l6ZS1oNTogICAgICAgICAgICAgICAxM3B4OyAvKiAxLjI1cmVtOyAqL1xuJGZvbnQtc2l6ZS1oNjogICAgICAgICAgICAgICAxcmVtO1xuXG4vLyAkZGlzcGxheTEtc2l6ZTogICAgICAgICAgICAgICA2cmVtO1xuLy8gJGRpc3BsYXkyLXNpemU6ICAgICAgICAgICAgICAgNS41cmVtO1xuLy8gJGRpc3BsYXkzLXNpemU6ICAgICAgICAgICAgICAgNC41cmVtO1xuLy8gJGRpc3BsYXk0LXNpemU6ICAgICAgICAgICAgICAgMy41cmVtO1xuLy8gXG4vLyAkZGlzcGxheTEtd2VpZ2h0OiAgICAgICAgICAgICAzMDA7XG4vLyAkZGlzcGxheTItd2VpZ2h0OiAgICAgICAgICAgICAzMDA7XG4vLyAkZGlzcGxheTMtd2VpZ2h0OiAgICAgICAgICAgICAzMDA7XG4vLyAkZGlzcGxheTQtd2VpZ2h0OiAgICAgICAgICAgICAzMDA7XG5cbiRsaW5lLWhlaWdodDogICAgICAgICAgICAgICAgMS41Mzg7IC8qIDIwcHggKi9cblxuJGhlYWRpbmdzLW1hcmdpbi1ib3R0b206ICAgICAkc3BhY2VyO1xuJGhlYWRpbmdzLWZvbnQtZmFtaWx5OiAgICAgICBpbmhlcml0O1xuJGhlYWRpbmdzLWZvbnQtd2VpZ2h0OiAgICAgICA1MDA7XG4kaGVhZGluZ3MtbGluZS1oZWlnaHQ6ICAgICAgIDEuMztcbiRoZWFkaW5ncy1jb2xvcjogICAgICAgICAgICAgaW5oZXJpdDtcbi8vIFxuLy8gJGxlYWQtZm9udC1zaXplOiAgICAgICAgICAgICAxLjI1cmVtO1xuLy8gJGxlYWQtZm9udC13ZWlnaHQ6ICAgICAgICAgICAzMDA7XG4vLyBcbiR0ZXh0LW11dGVkOiAgICAgICAgICAgICAgICAgICM3ZjhiOTc7XG4vLyBcbi8vICRhYmJyLWJvcmRlci1jb2xvcjogICAgICAgICAgICRncmF5LWxpZ2h0O1xuLy8gXG4vLyAkYmxvY2txdW90ZS1zbWFsbC1jb2xvcjogICAgICAkZ3JheS1saWdodDtcbi8vICRibG9ja3F1b3RlLWZvbnQtc2l6ZTogICAgICAgICgkZm9udC1zaXplLWJhc2UgKiAxLjI1KTtcbi8vICRibG9ja3F1b3RlLWJvcmRlci1jb2xvcjogICAgICRncmF5LWxpZ2h0ZXI7XG4vLyBcbi8vICRoci1ib3JkZXItY29sb3I6ICAgICAgICAgICAgIHJnYmEoMCwwLDAsLjEpO1xuLy8gJGhyLWJvcmRlci13aWR0aDogICAgICAgICAgICAgJGJvcmRlci13aWR0aDtcbi8vIFxuLy8gJGR0LWZvbnQtd2VpZ2h0OiAgICAgICAgICAgICAgYm9sZDtcbi8vIFxuLy8gJG5lc3RlZC1rYmQtZm9udC13ZWlnaHQ6ICAgICAgYm9sZDtcbi8vIFxuLy8gJGxpc3QtaW5saW5lLXBhZGRpbmc6ICAgICAgICAgNXB4O1xuXG5cbi8vIENvbXBvbmVudHNcbi8vXG4vLyBEZWZpbmUgY29tbW9uIHBhZGRpbmcgYW5kIGJvcmRlciByYWRpdXMgc2l6ZXMgYW5kIG1vcmUuXG5cbi8vICRsaW5lLWhlaWdodC1sZzogICAgICAgICAoNCAvIDMpO1xuLy8gJGxpbmUtaGVpZ2h0LXNtOiAgICAgICAgIDEuNTtcbi8vIFxuLy8gJGJvcmRlci1yYWRpdXM6ICAgICAgICAgIC4yNXJlbTtcbi8vICRib3JkZXItcmFkaXVzLWxnOiAgICAgICAuM3JlbTtcbi8vICRib3JkZXItcmFkaXVzLXNtOiAgICAgICAuMnJlbTtcbi8vIFxuLy8gJGNvbXBvbmVudC1hY3RpdmUtY29sb3I6ICNmZmY7XG4vLyAkY29tcG9uZW50LWFjdGl2ZS1iZzogICAgJGJyYW5kLXByaW1hcnk7XG4vLyBcbi8vICRjYXJldC13aWR0aDogICAgICAgICAgICAuM2VtO1xuLy8gJGNhcmV0LXdpZHRoLWxnOiAgICAgICAgICRjYXJldC13aWR0aDtcblxuXG4vLyBUYWJsZXNcbi8vXG4vLyBDdXN0b21pemVzIHRoZSBgLnRhYmxlYCBjb21wb25lbnQgd2l0aCBiYXNpYyB2YWx1ZXMsIGVhY2ggdXNlZCBhY3Jvc3MgYWxsIHRhYmxlIHZhcmlhdGlvbnMuXG5cbiR0YWJsZS1jZWxsLXBhZGRpbmc6ICAgICAgICAgICAgLjc1cmVtO1xuJHRhYmxlLXNtLWNlbGwtcGFkZGluZzogICAgICAgICAuM3JlbTtcblxuJHRhYmxlLWJnOiAgICAgICAgICAgICAgICAgICAgICB0cmFuc3BhcmVudDtcbiR0YWJsZS1iZy1hY2NlbnQ6ICAgICAgICAgICAgICAgI2Y5ZjlmOTtcbiR0YWJsZS1iZy1ob3ZlcjogICAgICAgICAgICAgICAgI2Y1ZjVmNTtcbiR0YWJsZS1iZy1hY3RpdmU6ICAgICAgICAgICAgICAgJHRhYmxlLWJnLWhvdmVyO1xuXG4kdGFibGUtYm9yZGVyLXdpZHRoOiAgICAgICAgICAgICRib3JkZXItd2lkdGg7XG4kdGFibGUtYm9yZGVyLWNvbG9yOiAgICAgICAgICAgICRncmF5LWxpZ2h0ZXI7XG5cblxuLy8gQnV0dG9uc1xuLy9cbi8vIEZvciBlYWNoIG9mIEJvb3RzdHJhcCdzIGJ1dHRvbnMsIGRlZmluZSB0ZXh0LCBiYWNrZ3JvdW5kIGFuZCBib3JkZXIgY29sb3IuXG5cbiRidG4tcGFkZGluZy14OiAgICAgICAgICAgICAgICAgIDEuMXJlbTtcbiRidG4tcGFkZGluZy15OiAgICAgICAgICAgICAgICAgIC4zODQ2cmVtO1xuJGJ0bi1mb250LXdlaWdodDogICAgICAgICAgICAgICAgbm9ybWFsO1xuXG4kYnRuLXByaW1hcnktY29sb3I6ICAgICAgICAgICAgICAjZmZmO1xuLy8gJGJ0bi1wcmltYXJ5LWJnOiAgICAgICAgICAgICAgICAgJGJyYW5kLXByaW1hcnk7XG4vLyAkYnRuLXByaW1hcnktYm9yZGVyOiAgICAgICAgICAgICAkYnRuLXByaW1hcnktYmc7XG5cbiRidG4tc2Vjb25kYXJ5LWNvbG9yOiAgICAgICAgICAgICRncmF5LWRhcms7XG4kYnRuLXNlY29uZGFyeS1iZzogICAgICAgICAgICAgICB0cmFuc3BhcmVudDtcbiRidG4tc2Vjb25kYXJ5LWJvcmRlcjogICAgICAgICAgIHRyYW5zcGFyZW50O1xuXG4vLyAkYnRuLWluZm8tY29sb3I6ICAgICAgICAgICAgICAgICAjZmZmO1xuLy8gJGJ0bi1pbmZvLWJnOiAgICAgICAgICAgICAgICAgICAgJGJyYW5kLWluZm87XG4vLyAkYnRuLWluZm8tYm9yZGVyOiAgICAgICAgICAgICAgICAkYnRuLWluZm8tYmc7XG5cbiRidG4tc3VjY2Vzcy1jb2xvcjogICAgICAgICAgICAgICNmZmY7XG4kYnRuLXN1Y2Nlc3MtYmc6ICAgICAgICAgICAgICAgICAkYnJhbmQtc3VjY2VzcztcbiRidG4tc3VjY2Vzcy1ib3JkZXI6ICAgICAgICAgICAgICRidG4tc3VjY2Vzcy1iZztcbiRidG4tc3VjY2Vzcy1zaGFkb3c6ICAgICAgXHRcdCBkYXJrZW4oJGJ0bi1zdWNjZXNzLWJnLCA2JSk7XG5cbiRidG4tY29tcGxldGUtY29sb3I6ICAgICAgICAgICAgICM1NTU7XG4kYnRuLWNvbXBsZXRlLWJnOiAgICAgICAgICAgICAgICAkYnJhbmQtc3VjY2VzcztcbiRidG4tY29tcGxldGUtYm9yZGVyOiAgICAgICAgICAgICRncmF5LWxpZ2h0O1xuJGJ0bi1jb21wbGV0ZS1zaGFkb3c6ICAgICAgXHRcdCBkYXJrZW4oJGJ0bi1zdWNjZXNzLWJnLCA2JSk7XG5cbi8vICRidG4td2FybmluZy1jb2xvcjogICAgICAgICAgICAgICNmZmY7XG4vLyAkYnRuLXdhcm5pbmctYmc6ICAgICAgICAgICAgICAgICAkYnJhbmQtd2FybmluZztcbi8vICRidG4td2FybmluZy1ib3JkZXI6ICAgICAgICAgICAgICRidG4td2FybmluZy1iZztcblxuJGJ0bi1kYW5nZXItY29sb3I6ICAgICAgICAgICAgICAgJGJyYW5kLWRhbmdlcjtcbiRidG4tZGFuZ2VyLWJnOiAgICAgICAgICAgICAgICAgIHRyYW5zcGFyZW50O1xuJGJ0bi1kYW5nZXItYm9yZGVyOiAgICAgICAgICAgICAgdHJhbnNwYXJlbnQ7XG5cbi8vICRidG4tbGluay1kaXNhYmxlZC1jb2xvcjogICAgICAgICRncmF5LWxpZ2h0O1xuLy8gXG4vLyAkYnRuLXBhZGRpbmcteC1zbTogICAgICAgICAgICAgICAuNzVyZW07XG4vLyAkYnRuLXBhZGRpbmcteS1zbTogICAgICAgICAgICAgICAuMjVyZW07XG4vLyBcbi8vICRidG4tcGFkZGluZy14LWxnOiAgICAgICAgICAgICAgIDEuMjVyZW07XG4vLyAkYnRuLXBhZGRpbmcteS1sZzogICAgICAgICAgICAgICAuNzVyZW07XG5cbi8vIEFsbG93cyBmb3IgY3VzdG9taXppbmcgYnV0dG9uIHJhZGl1cyBpbmRlcGVuZGVudGx5IGZyb20gZ2xvYmFsIGJvcmRlciByYWRpdXNcbi8vICRidG4tYm9yZGVyLXJhZGl1czogICAgICAgICAgICAgICRib3JkZXItcmFkaXVzO1xuLy8gJGJ0bi1ib3JkZXItcmFkaXVzLWxnOiAgICAgICAgICAgJGJvcmRlci1yYWRpdXMtbGc7XG4vLyAkYnRuLWJvcmRlci1yYWRpdXMtc206ICAgICAgICAgICAkYm9yZGVyLXJhZGl1cy1zbTtcblxuXG4vLyBGb3Jtc1xuXG4kaW5wdXQtcGFkZGluZy14OiAgICAgICAgICAgICAgICAuNzVyZW07XG4kaW5wdXQtcGFkZGluZy15OiAgICAgICAgICAgICAgICAuNTRyZW07IC8vLjM3NXJlbTtcblxuLy8gJGlucHV0LWJnOiAgICAgICAgICAgICAgICAgICAgICAgI2ZmZjtcbi8vICRpbnB1dC1iZy1kaXNhYmxlZDogICAgICAgICAgICAgICRncmF5LWxpZ2h0ZXI7XG4vLyBcbi8vICRpbnB1dC1jb2xvcjogICAgICAgICAgICAgICAgICAgICRncmF5O1xuLy8gJGlucHV0LWJvcmRlci1jb2xvcjogICAgICAgICAgICAgI2NjYztcbi8vICRpbnB1dC1idG4tYm9yZGVyLXdpZHRoOiAgICAgICAgICRib3JkZXItd2lkdGg7IC8vIEZvciBmb3JtIGNvbnRyb2xzIGFuZCBidXR0b25zXG4vLyAkaW5wdXQtYm94LXNoYWRvdzogICAgICAgICAgICAgICBpbnNldCAwIDFweCAxcHggcmdiYSgwLDAsMCwuMDc1KTtcbi8vIFxuLy8gJGlucHV0LWJvcmRlci1yYWRpdXM6ICAgICAgICAgICAgJGJvcmRlci1yYWRpdXM7XG4vLyAkaW5wdXQtYm9yZGVyLXJhZGl1cy1sZzogICAgICAgICAkYm9yZGVyLXJhZGl1cy1sZztcbi8vICRpbnB1dC1ib3JkZXItcmFkaXVzLXNtOiAgICAgICAgICRib3JkZXItcmFkaXVzLXNtO1xuLy8gXG4vLyAkaW5wdXQtYm9yZGVyLWZvY3VzOiAgICAgICAgICAgICAjNjZhZmU5O1xuLy8gJGlucHV0LWJveC1zaGFkb3ctZm9jdXM6ICAgICAgICAgcmdiYSgxMDIsMTc1LDIzMywuNik7XG4vLyBcbi8vICRpbnB1dC1jb2xvci1wbGFjZWhvbGRlcjogICAgICAgICM5OTk7XG4vLyBcbi8vICRpbnB1dC1wYWRkaW5nLXgtc206ICAgICAgICAgICAgIC43NXJlbTtcbi8vICRpbnB1dC1wYWRkaW5nLXktc206ICAgICAgICAgICAgIC4yNzVyZW07XG4vLyBcbi8vICRpbnB1dC1wYWRkaW5nLXgtbGc6ICAgICAgICAgICAgIDEuMjVyZW07XG4vLyAkaW5wdXQtcGFkZGluZy15LWxnOiAgICAgICAgICAgICAuNzVyZW07XG4vLyBcbi8vICRpbnB1dC1oZWlnaHQ6ICAgICAgICAgICAgICAgICAgICgoJGZvbnQtc2l6ZS1iYXNlICogJGxpbmUtaGVpZ2h0KSArICgkaW5wdXQtcGFkZGluZy15ICogMikpO1xuLy8gJGlucHV0LWhlaWdodC1sZzogICAgICAgICAgICAgICAgKCgkZm9udC1zaXplLWxnICogJGxpbmUtaGVpZ2h0LWxnKSArICgkaW5wdXQtcGFkZGluZy15LWxnICogMikpO1xuLy8gJGlucHV0LWhlaWdodC1zbTogICAgICAgICAgICAgICAgKCgkZm9udC1zaXplLXNtICogJGxpbmUtaGVpZ2h0LXNtKSArICgkaW5wdXQtcGFkZGluZy15LXNtICogMikpO1xuLy8gXG4vLyAkZm9ybS1ncm91cC1tYXJnaW4tYm90dG9tOiAgICAgICAkc3BhY2VyLXk7XG4vLyBcbi8vICRpbnB1dC1ncm91cC1hZGRvbi1iZzogICAgICAgICAgICRncmF5LWxpZ2h0ZXI7XG4vLyAkaW5wdXQtZ3JvdXAtYWRkb24tYm9yZGVyLWNvbG9yOiAkaW5wdXQtYm9yZGVyLWNvbG9yO1xuLy8gXG4vLyAkY3Vyc29yLWRpc2FibGVkOiAgICAgICAgICAgICAgICBub3QtYWxsb3dlZDtcblxuLy8gRm9ybSB2YWxpZGF0aW9uIGljb25zXG4vLyAkZm9ybS1pY29uLXN1Y2Nlc3M6IFwiZGF0YTppbWFnZS9zdmcreG1sO2Jhc2U2NCxQSE4yWnlCNGJXeHVjejBpYUhSMGNEb3ZMM2QzZHk1M015NXZjbWN2TWpBd01DOXpkbWNpSUhacFpYZENiM2c5SWpBZ01DQTJNVElnTnpreUlqNDhjR0YwYUNCbWFXeHNQU0lqTldOaU9EVmpJaUJrUFNKTk1qTXpMamdnTmpFd1l5MHhNeTR6SURBdE1qWXROaTB6TkMweE5pNDRURGt3TGpVZ05EUTRMamhETnpZdU15QTBNekFnT0RBZ05EQXpMak1nT1RndU9DQXpPRGxqTVRndU9DMHhOQzR5SURRMUxqVXRNVEF1TkNBMU9TNDRJRGd1Tkd3M01pQTVOVXcwTlRFdU15QXlOREpqTVRJdU5TMHlNQ0F6T0M0NExUSTJMaklnTlRndU9DMHhNeTQzSURJd0lERXlMalFnTWpZZ016Z3VOeUF4TXk0M0lEVTRMamhNTWpjd0lEVTVNR010Tnk0MElERXlMVEl3TGpJZ01Ua3VOQzB6TkM0eklESXdhQzB5ZWlJdlBqd3ZjM1puUGc9PVwiO1xuLy8gJGZvcm0taWNvbi13YXJuaW5nOiBcImRhdGE6aW1hZ2Uvc3ZnK3htbDtiYXNlNjQsUEhOMlp5QjRiV3h1Y3owaWFIUjBjRG92TDNkM2R5NTNNeTV2Y21jdk1qQXdNQzl6ZG1jaUlIWnBaWGRDYjNnOUlqQWdNQ0EyTVRJZ056a3lJajQ4Y0dGMGFDQm1hV3hzUFNJalpqQmhaRFJsSWlCa1BTSk5OakF6SURZME1DNHliQzB5TnpndU5TMDFNRGxqTFRNdU9DMDJMall0TVRBdU9DMHhNQzQyTFRFNExqVXRNVEF1Tm5NdE1UUXVOeUEwTFRFNExqVWdNVEF1Tmt3NUlEWTBNQzR5WXkwekxqY2dOaTQxTFRNdU5pQXhOQzQwTGpJZ01qQXVPQ0F6TGpnZ05pNDFJREV3TGpnZ01UQXVOQ0F4T0M0eklERXdMalJvTlRVM1l6Y3VOaUF3SURFMExqWXROQ0F4T0M0MExURXdMalFnTXk0MUxUWXVOQ0F6TGpZdE1UUXVOQ0F3TFRJd0xqaDZiUzB5TmpZdU5DMHpNR2d0TmpFdU1sWTFORGxvTmpFdU1uWTJNUzR5ZW0wd0xURXdOMmd0TmpFdU1sWXpNRFJvTmpFdU1uWXhPVGw2SWk4K1BDOXpkbWMrXCI7XG4vLyAkZm9ybS1pY29uLWRhbmdlcjogXCJkYXRhOmltYWdlL3N2Zyt4bWw7YmFzZTY0LFBITjJaeUI0Yld4dWN6MGlhSFIwY0RvdkwzZDNkeTUzTXk1dmNtY3ZNakF3TUM5emRtY2lJSFpwWlhkQ2IzZzlJakFnTUNBMk1USWdOemt5SWo0OGNHRjBhQ0JtYVd4c1BTSWpaRGsxTXpSbUlpQmtQU0pOTkRRM0lEVTBOQzQwWXkweE5DNDBJREUwTGpRdE16Y3VOaUF4TkM0MExUVXlJREJzTFRnNUxUa3lMamN0T0RrZ09USXVOMk10TVRRdU5TQXhOQzQwTFRNM0xqY2dNVFF1TkMwMU1pQXdMVEUwTGpRdE1UUXVOQzB4TkM0MExUTTNMallnTUMwMU1tdzVNaTQwTFRrMkxqTXRPVEl1TkMwNU5pNHpZeTB4TkM0MExURTBMalF0TVRRdU5DMHpOeTQySURBdE5USnpNemN1TmkweE5DNHpJRFV5SURCc09Ea2dPVEl1T0NBNE9TNHlMVGt5TGpkak1UUXVOQzB4TkM0MElETTNMall0TVRRdU5DQTFNaUF3SURFMExqTWdNVFF1TkNBeE5DNHpJRE0zTGpZZ01DQTFNa3d6TlRRdU5pQXpPVFpzT1RJdU5DQTVOaTQwWXpFMExqUWdNVFF1TkNBeE5DNDBJRE0zTGpZZ01DQTFNbm9pTHo0OEwzTjJaejQ9XCI7XG5cblxuLy8gRHJvcGRvd25zXG4vL1xuLy8gRHJvcGRvd24gbWVudSBjb250YWluZXIgYW5kIGNvbnRlbnRzLlxuXG4vLyAkZHJvcGRvd24tYmc6ICAgICAgICAgICAgICAgICAgICAjZmZmO1xuLy8gJGRyb3Bkb3duLWJvcmRlci1jb2xvcjogICAgICAgICAgcmdiYSgwLDAsMCwuMTUpO1xuLy8gJGRyb3Bkb3duLWJvcmRlci13aWR0aDogICAgICAgICAgJGJvcmRlci13aWR0aDtcbi8vICRkcm9wZG93bi1kaXZpZGVyLWJnOiAgICAgICAgICAgICNlNWU1ZTU7XG4vLyBcbi8vICRkcm9wZG93bi1saW5rLWNvbG9yOiAgICAgICAgICAgICRncmF5LWRhcms7XG4vLyAkZHJvcGRvd24tbGluay1ob3Zlci1jb2xvcjogICAgICBkYXJrZW4oJGdyYXktZGFyaywgNSUpO1xuLy8gJGRyb3Bkb3duLWxpbmstaG92ZXItYmc6ICAgICAgICAgI2Y1ZjVmNTtcbi8vIFxuLy8gJGRyb3Bkb3duLWxpbmstYWN0aXZlLWNvbG9yOiAgICAgJGNvbXBvbmVudC1hY3RpdmUtY29sb3I7XG4vLyAkZHJvcGRvd24tbGluay1hY3RpdmUtYmc6ICAgICAgICAkY29tcG9uZW50LWFjdGl2ZS1iZztcbi8vIFxuLy8gJGRyb3Bkb3duLWxpbmstZGlzYWJsZWQtY29sb3I6ICAgJGdyYXktbGlnaHQ7XG4vLyBcbi8vICRkcm9wZG93bi1oZWFkZXItY29sb3I6ICAgICAgICAgICRncmF5LWxpZ2h0O1xuXG5cbi8vIFotaW5kZXggbWFzdGVyIGxpc3Rcbi8vXG4vLyBXYXJuaW5nOiBBdm9pZCBjdXN0b21pemluZyB0aGVzZSB2YWx1ZXMuIFRoZXkncmUgdXNlZCBmb3IgYSBiaXJkJ3MgZXllIHZpZXdcbi8vIG9mIGNvbXBvbmVudHMgZGVwZW5kZW50IG9uIHRoZSB6LWF4aXMgYW5kIGFyZSBkZXNpZ25lZCB0byBhbGwgd29yayB0b2dldGhlci5cblxuLy8gJHppbmRleC1uYXZiYXI6ICAgICAgICAgICAgMTAwMDtcbi8vICR6aW5kZXgtZHJvcGRvd246ICAgICAgICAgIDEwMDA7XG4vLyAkemluZGV4LXBvcG92ZXI6ICAgICAgICAgICAxMDYwO1xuLy8gJHppbmRleC10b29sdGlwOiAgICAgICAgICAgMTA3MDtcbi8vICR6aW5kZXgtbmF2YmFyLWZpeGVkOiAgICAgIDEwMzA7XG4vLyAkemluZGV4LW5hdmJhci1zdGlja3k6ICAgICAxMDMwO1xuLy8gJHppbmRleC1tb2RhbC1iZzogICAgICAgICAgMTA0MDtcbi8vICR6aW5kZXgtbW9kYWw6ICAgICAgICAgICAgIDEwNTA7XG5cblxuLy8gTmF2YmFyXG5cbiRuYXZiYXItYm9yZGVyLXJhZGl1czogICAgICAgICAgICAgIDA7XG4kbmF2YmFyLXBhZGRpbmctaG9yaXpvbnRhbDogICAgICAgICAkc3BhY2VyO1xuJG5hdmJhci1wYWRkaW5nLXZlcnRpY2FsOiAgICAgICAgICAgKCRzcGFjZXIgLyAyKTtcbi8vIFxuLy8gJG5hdmJhci1kYXJrLWNvbG9yOiAgICAgICAgICAgICAgICAgcmdiYSgyNTUsMjU1LDI1NSwuNSk7XG4vLyAkbmF2YmFyLWRhcmstaG92ZXItY29sb3I6ICAgICAgICAgICByZ2JhKDI1NSwyNTUsMjU1LC43NSk7XG4vLyAkbmF2YmFyLWRhcmstYWN0aXZlLWNvbG9yOiAgICAgICAgICByZ2JhKDI1NSwyNTUsMjU1LDEpO1xuLy8gJG5hdmJhci1kYXJrLWRpc2FibGVkLWNvbG9yOiAgICAgICAgcmdiYSgyNTUsMjU1LDI1NSwuMjUpO1xuLy8gXG4vLyAkbmF2YmFyLWxpZ2h0LWNvbG9yOiAgICAgICAgICAgICAgICByZ2JhKDAsMCwwLC4zKTtcbi8vICRuYXZiYXItbGlnaHQtaG92ZXItY29sb3I6ICAgICAgICAgIHJnYmEoMCwwLDAsLjYpO1xuLy8gJG5hdmJhci1saWdodC1hY3RpdmUtY29sb3I6ICAgICAgICAgcmdiYSgwLDAsMCwuOCk7XG4vLyAkbmF2YmFyLWxpZ2h0LWRpc2FibGVkLWNvbG9yOiAgICAgICByZ2JhKDAsMCwwLC4xNSk7XG5cblxuLy8gTmF2c1xuXG4kbmF2LWxpbmstcGFkZGluZzogICAgICAgICAgICAgICAgICAgICAgICAgIDEycHggOHB4O1xuJG5hdi1saW5rLWhvdmVyLWJnOiAgICAgICAgICAgICAgICAgICAgICAgICByZWQ7IC8vJGdyYXktbGlnaHRlcjtcblxuJG5hdi1kaXNhYmxlZC1saW5rLWNvbG9yOiAgICAgICAgICAgICAgICAgICAkdGV4dC1tdXRlZDtcbiRuYXYtZGlzYWJsZWQtbGluay1ob3Zlci1jb2xvcjogICAgICAgICAgICAgJHRleHQtbXV0ZWQ7XG5cbiRuYXYtdGFicy1ib3JkZXItY29sb3I6ICAgICAgICAgICAgICAgICAgICAgI2Q5ZGVlMjtcblxuJG5hdi10YWJzLWxpbmstYm9yZGVyLXdpZHRoOiAgICAgICAgICAgICAgICAwO1xuJG5hdi10YWJzLWxpbmstaG92ZXItYm9yZGVyLWNvbG9yOiAgICAgICAgICBncmVlbjsgLy8kZ3JheS1saWdodGVyO1xuXG4kbmF2LXRhYnMtYWN0aXZlLWxpbmstaG92ZXItYmc6ICAgICAgICAgICAgICRib2R5LWJnO1xuJG5hdi10YWJzLWFjdGl2ZS1saW5rLWhvdmVyLWNvbG9yOiAgICAgICAgICAkYm9keS1jb2xvcjtcbiRuYXYtdGFicy1hY3RpdmUtbGluay1ob3Zlci1ib3JkZXItY29sb3I6ICAgI2RkZDtcblxuJG5hdi10YWJzLWp1c3RpZmllZC1saW5rLWJvcmRlci1jb2xvcjogICAgICAgICAgICAjZGRkO1xuJG5hdi10YWJzLWp1c3RpZmllZC1hY3RpdmUtbGluay1ib3JkZXItY29sb3I6ICAgICAkYm9keS1iZztcbi8vIFxuLy8gJG5hdi1waWxscy1ib3JkZXItcmFkaXVzOiAgICAgICAgICAgICAgICAgICAkYm9yZGVyLXJhZGl1cztcbi8vICRuYXYtcGlsbHMtYWN0aXZlLWxpbmstaG92ZXItYmc6ICAgICAgICAgICAgJGNvbXBvbmVudC1hY3RpdmUtYmc7XG4vLyAkbmF2LXBpbGxzLWFjdGl2ZS1saW5rLWhvdmVyLWNvbG9yOiAgICAgICAgICRjb21wb25lbnQtYWN0aXZlLWNvbG9yO1xuXG5cbi8vIFBhZ2luYXRpb25cblxuLy8gJHBhZ2luYXRpb24tcGFkZGluZy14OiAgICAgICAgICAgICAgICAuNzVyZW07XG4vLyAkcGFnaW5hdGlvbi1wYWRkaW5nLXk6ICAgICAgICAgICAgICAgIC41cmVtO1xuLy8gJHBhZ2luYXRpb24tcGFkZGluZy14LXNtOiAgICAgICAgICAgICAuNzVyZW07XG4vLyAkcGFnaW5hdGlvbi1wYWRkaW5nLXktc206ICAgICAgICAgICAgIC4yNzVyZW07XG4vLyAkcGFnaW5hdGlvbi1wYWRkaW5nLXgtbGc6ICAgICAgICAgICAgIDEuNXJlbTtcbi8vICRwYWdpbmF0aW9uLXBhZGRpbmcteS1sZzogICAgICAgICAgICAgLjc1cmVtO1xuLy8gXG4vLyBcbi8vICRwYWdpbmF0aW9uLWNvbG9yOiAgICAgICAgICAgICAgICAgICAgICRsaW5rLWNvbG9yO1xuLy8gJHBhZ2luYXRpb24tYmc6ICAgICAgICAgICAgICAgICAgICAgICAgI2ZmZjtcbi8vICRwYWdpbmF0aW9uLWJvcmRlci13aWR0aDogICAgICAgICAgICAgICRib3JkZXItd2lkdGg7XG4vLyAkcGFnaW5hdGlvbi1ib3JkZXItY29sb3I6ICAgICAgICAgICAgICAjZGRkO1xuLy8gXG4vLyAkcGFnaW5hdGlvbi1ob3Zlci1jb2xvcjogICAgICAgICAgICAgICAkbGluay1ob3Zlci1jb2xvcjtcbi8vICRwYWdpbmF0aW9uLWhvdmVyLWJnOiAgICAgICAgICAgICAgICAgICRncmF5LWxpZ2h0ZXI7XG4vLyAkcGFnaW5hdGlvbi1ob3Zlci1ib3JkZXI6ICAgICAgICAgICAgICAjZGRkO1xuLy8gXG4vLyAkcGFnaW5hdGlvbi1hY3RpdmUtY29sb3I6ICAgICAgICAgICAgICAjZmZmO1xuLy8gJHBhZ2luYXRpb24tYWN0aXZlLWJnOiAgICAgICAgICAgICAgICAgJGJyYW5kLXByaW1hcnk7XG4vLyAkcGFnaW5hdGlvbi1hY3RpdmUtYm9yZGVyOiAgICAgICAgICAgICAkYnJhbmQtcHJpbWFyeTtcbi8vIFxuLy8gJHBhZ2luYXRpb24tZGlzYWJsZWQtY29sb3I6ICAgICAgICAgICAgJGdyYXktbGlnaHQ7XG4vLyAkcGFnaW5hdGlvbi1kaXNhYmxlZC1iZzogICAgICAgICAgICAgICAjZmZmO1xuLy8gJHBhZ2luYXRpb24tZGlzYWJsZWQtYm9yZGVyOiAgICAgICAgICAgI2RkZDtcblxuXG4vLyBQYWdlclxuXG4vLyAkcGFnZXItYmc6ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkcGFnaW5hdGlvbi1iZztcbi8vICRwYWdlci1ib3JkZXItd2lkdGg6ICAgICAgICAgICAgICAgICAgICRib3JkZXItd2lkdGg7XG4vLyAkcGFnZXItYm9yZGVyLWNvbG9yOiAgICAgICAgICAgICAgICAgICAkcGFnaW5hdGlvbi1ib3JkZXItY29sb3I7XG4vLyAkcGFnZXItYm9yZGVyLXJhZGl1czogICAgICAgICAgICAgICAgICAxNXB4O1xuLy8gXG4vLyAkcGFnZXItaG92ZXItYmc6ICAgICAgICAgICAgICAgICAgICAgICAkcGFnaW5hdGlvbi1ob3Zlci1iZztcbi8vIFxuLy8gJHBhZ2VyLWFjdGl2ZS1iZzogICAgICAgICAgICAgICAgICAgICAgJHBhZ2luYXRpb24tYWN0aXZlLWJnO1xuLy8gJHBhZ2VyLWFjdGl2ZS1jb2xvcjogICAgICAgICAgICAgICAgICAgJHBhZ2luYXRpb24tYWN0aXZlLWNvbG9yO1xuLy8gXG4vLyAkcGFnZXItZGlzYWJsZWQtY29sb3I6ICAgICAgICAgICAgICAgICAkcGFnaW5hdGlvbi1kaXNhYmxlZC1jb2xvcjtcblxuXG4vLyBKdW1ib3Ryb25cblxuLy8gJGp1bWJvdHJvbi1wYWRkaW5nOiAgICAgICAgICAgICAgMnJlbTtcbi8vICRqdW1ib3Ryb24tYmc6ICAgICAgICAgICAgICAgICAgICRncmF5LWxpZ2h0ZXI7XG5cblxuLy8gRm9ybSBzdGF0ZXMgYW5kIGFsZXJ0c1xuLy9cbi8vIERlZmluZSBjb2xvcnMgZm9yIGZvcm0gZmVlZGJhY2sgc3RhdGVzIGFuZCwgYnkgZGVmYXVsdCwgYWxlcnRzLlxuXG4vLyAkc3RhdGUtc3VjY2Vzcy10ZXh0OiAgICAgICAgICAgICAjM2M3NjNkO1xuLy8gJHN0YXRlLXN1Y2Nlc3MtYmc6ICAgICAgICAgICAgICAgI2RmZjBkODtcbi8vICRzdGF0ZS1zdWNjZXNzLWJvcmRlcjogICAgICAgICAgIGRhcmtlbigkc3RhdGUtc3VjY2Vzcy1iZywgNSUpO1xuLy8gXG4vLyAkc3RhdGUtaW5mby10ZXh0OiAgICAgICAgICAgICAgICAjMzE3MDhmO1xuLy8gJHN0YXRlLWluZm8tYmc6ICAgICAgICAgICAgICAgICAgI2Q5ZWRmNztcbi8vICRzdGF0ZS1pbmZvLWJvcmRlcjogICAgICAgICAgICAgIGRhcmtlbigkc3RhdGUtaW5mby1iZywgNyUpO1xuLy8gXG4vLyAkc3RhdGUtd2FybmluZy10ZXh0OiAgICAgICAgICAgICAjOGE2ZDNiO1xuLy8gJHN0YXRlLXdhcm5pbmctYmc6ICAgICAgICAgICAgICAgI2ZjZjhlMztcbi8vICRzdGF0ZS13YXJuaW5nLWJvcmRlcjogICAgICAgICAgIGRhcmtlbigkc3RhdGUtd2FybmluZy1iZywgNSUpO1xuLy8gXG4vLyAkc3RhdGUtZGFuZ2VyLXRleHQ6ICAgICAgICAgICAgICAjYTk0NDQyO1xuLy8gJHN0YXRlLWRhbmdlci1iZzogICAgICAgICAgICAgICAgI2YyZGVkZTtcbi8vICRzdGF0ZS1kYW5nZXItYm9yZGVyOiAgICAgICAgICAgIGRhcmtlbigkc3RhdGUtZGFuZ2VyLWJnLCA1JSk7XG5cblxuLy8gQ2FyZHNcbi8vICRjYXJkLXNwYWNlci14OiAgICAgICAgICAgIDEuMjVyZW07XG4vLyAkY2FyZC1zcGFjZXIteTogICAgICAgICAgICAuNzVyZW07XG4vLyAkY2FyZC1ib3JkZXItd2lkdGg6ICAgICAgICAxcHg7XG4vLyAkY2FyZC1ib3JkZXItcmFkaXVzOiAgICAgICAkYm9yZGVyLXJhZGl1cztcbi8vICRjYXJkLWJvcmRlci1jb2xvcjogICAgICAgICNlNWU1ZTU7XG4vLyAkY2FyZC1ib3JkZXItcmFkaXVzLWlubmVyOiAkY2FyZC1ib3JkZXItcmFkaXVzO1xuLy8gJGNhcmQtY2FwLWJnOiAgICAgICAgICAgICAgI2Y1ZjVmNTtcbi8vICRjYXJkLWJnOiAgICAgICAgICAgICAgICAgICNmZmY7XG4vLyBcbi8vICRjYXJkLWxpbmstaG92ZXItY29sb3I6ICAgICNmZmY7XG5cblxuLy8gVG9vbHRpcHNcblxuLy8gJHRvb2x0aXAtbWF4LXdpZHRoOiAgICAgICAgICAgMjAwcHg7XG4vLyAkdG9vbHRpcC1jb2xvcjogICAgICAgICAgICAgICAjZmZmO1xuLy8gJHRvb2x0aXAtYmc6ICAgICAgICAgICAgICAgICAgIzAwMDtcbi8vICR0b29sdGlwLW9wYWNpdHk6ICAgICAgICAgICAgIC45O1xuLy8gXG4vLyAkdG9vbHRpcC1hcnJvdy13aWR0aDogICAgICAgICA1cHg7XG4vLyAkdG9vbHRpcC1hcnJvdy1jb2xvcjogICAgICAgICAkdG9vbHRpcC1iZztcblxuXG4vLyBQb3BvdmVyc1xuXG4vLyAkcG9wb3Zlci1iZzogICAgICAgICAgICAgICAgICAgICAgICAgICNmZmY7XG4vLyAkcG9wb3Zlci1tYXgtd2lkdGg6ICAgICAgICAgICAgICAgICAgIDI3NnB4O1xuLy8gJHBvcG92ZXItYm9yZGVyLXdpZHRoOiAgICAgICAgICAgICAgICAkYm9yZGVyLXdpZHRoO1xuLy8gJHBvcG92ZXItYm9yZGVyLWNvbG9yOiAgICAgICAgICAgICAgICByZ2JhKDAsMCwwLC4yKTtcbi8vIFxuLy8gJHBvcG92ZXItdGl0bGUtYmc6ICAgICAgICAgICAgICAgICAgICBkYXJrZW4oJHBvcG92ZXItYmcsIDMlKTtcbi8vIFxuLy8gJHBvcG92ZXItYXJyb3ctd2lkdGg6ICAgICAgICAgICAgICAgICAxMHB4O1xuLy8gJHBvcG92ZXItYXJyb3ctY29sb3I6ICAgICAgICAgICAgICAgICAkcG9wb3Zlci1iZztcbi8vIFxuLy8gJHBvcG92ZXItYXJyb3ctb3V0ZXItd2lkdGg6ICAgICAgICAgICAoJHBvcG92ZXItYXJyb3ctd2lkdGggKyAxKTtcbi8vICRwb3BvdmVyLWFycm93LW91dGVyLWNvbG9yOiAgICAgICAgICAgZmFkZS1pbigkcG9wb3Zlci1ib3JkZXItY29sb3IsIDAuMDUpO1xuXG5cbi8vIExhYmVsc1xuXG4vLyAkbGFiZWwtZGVmYXVsdC1iZzogICAgICAgICAgICAkZ3JheS1saWdodDtcbi8vICRsYWJlbC1wcmltYXJ5LWJnOiAgICAgICAgICAgICRicmFuZC1wcmltYXJ5O1xuLy8gJGxhYmVsLXN1Y2Nlc3MtYmc6ICAgICAgICAgICAgJGJyYW5kLXN1Y2Nlc3M7XG4vLyAkbGFiZWwtaW5mby1iZzogICAgICAgICAgICAgICAkYnJhbmQtaW5mbztcbi8vICRsYWJlbC13YXJuaW5nLWJnOiAgICAgICAgICAgICRicmFuZC13YXJuaW5nO1xuLy8gJGxhYmVsLWRhbmdlci1iZzogICAgICAgICAgICAgJGJyYW5kLWRhbmdlcjtcbi8vIFxuLy8gJGxhYmVsLWNvbG9yOiAgICAgICAgICAgICAgICAgI2ZmZjtcbi8vICRsYWJlbC1saW5rLWhvdmVyLWNvbG9yOiAgICAgICNmZmY7XG4vLyAkbGFiZWwtZm9udC13ZWlnaHQ6ICAgICAgICAgICBib2xkO1xuXG5cbi8vIE1vZGFsc1xuXG4vLyBQYWRkaW5nIGFwcGxpZWQgdG8gdGhlIG1vZGFsIGJvZHlcbi8vICRtb2RhbC1pbm5lci1wYWRkaW5nOiAgICAgICAgIDE1cHg7XG4vLyBcbi8vICRtb2RhbC10aXRsZS1wYWRkaW5nOiAgICAgICAgIDE1cHg7XG4vLyAkbW9kYWwtdGl0bGUtbGluZS1oZWlnaHQ6ICAgICAkbGluZS1oZWlnaHQ7XG4vLyBcbi8vICRtb2RhbC1jb250ZW50LWJnOiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgI2ZmZjtcbi8vICRtb2RhbC1jb250ZW50LWJvcmRlci1jb2xvcjogICAgICAgICAgICAgICAgICAgcmdiYSgwLDAsMCwuMik7XG4vLyBcbi8vICRtb2RhbC1iYWNrZHJvcC1iZzogICAgICAgICAgICMwMDA7XG4vLyAkbW9kYWwtYmFja2Ryb3Atb3BhY2l0eTogICAgICAuNTtcbi8vICRtb2RhbC1oZWFkZXItYm9yZGVyLWNvbG9yOiAgICNlNWU1ZTU7XG4vLyAkbW9kYWwtZm9vdGVyLWJvcmRlci1jb2xvcjogICAkbW9kYWwtaGVhZGVyLWJvcmRlci1jb2xvcjtcbi8vIFxuLy8gJG1vZGFsLWxnOiAgICAgICAgICAgICAgICAgICAgOTAwcHg7XG4vLyAkbW9kYWwtbWQ6ICAgICAgICAgICAgICAgICAgICA2MDBweDtcbi8vICRtb2RhbC1zbTogICAgICAgICAgICAgICAgICAgIDMwMHB4O1xuXG5cbi8vIEFsZXJ0c1xuLy9cbi8vIERlZmluZSBhbGVydCBjb2xvcnMsIGJvcmRlciByYWRpdXMsIGFuZCBwYWRkaW5nLlxuXG4vLyAkYWxlcnQtcGFkZGluZzogICAgICAgICAgICAgICAxNXB4O1xuLy8gJGFsZXJ0LWJvcmRlci1yYWRpdXM6ICAgICAgICAgJGJvcmRlci1yYWRpdXM7XG4vLyAkYWxlcnQtbGluay1mb250LXdlaWdodDogICAgICBib2xkO1xuLy8gJGFsZXJ0LWJvcmRlci13aWR0aDogICAgICAgICAgJGJvcmRlci13aWR0aDtcbi8vIFxuLy8gJGFsZXJ0LXN1Y2Nlc3MtYmc6ICAgICAgICAgICAgJHN0YXRlLXN1Y2Nlc3MtYmc7XG4vLyAkYWxlcnQtc3VjY2Vzcy10ZXh0OiAgICAgICAgICAkc3RhdGUtc3VjY2Vzcy10ZXh0O1xuLy8gJGFsZXJ0LXN1Y2Nlc3MtYm9yZGVyOiAgICAgICAgJHN0YXRlLXN1Y2Nlc3MtYm9yZGVyO1xuLy8gXG4vLyAkYWxlcnQtaW5mby1iZzogICAgICAgICAgICAgICAkc3RhdGUtaW5mby1iZztcbi8vICRhbGVydC1pbmZvLXRleHQ6ICAgICAgICAgICAgICRzdGF0ZS1pbmZvLXRleHQ7XG4vLyAkYWxlcnQtaW5mby1ib3JkZXI6ICAgICAgICAgICAkc3RhdGUtaW5mby1ib3JkZXI7XG4vLyBcbi8vICRhbGVydC13YXJuaW5nLWJnOiAgICAgICAgICAgICRzdGF0ZS13YXJuaW5nLWJnO1xuLy8gJGFsZXJ0LXdhcm5pbmctdGV4dDogICAgICAgICAgJHN0YXRlLXdhcm5pbmctdGV4dDtcbi8vICRhbGVydC13YXJuaW5nLWJvcmRlcjogICAgICAgICRzdGF0ZS13YXJuaW5nLWJvcmRlcjtcbi8vIFxuLy8gJGFsZXJ0LWRhbmdlci1iZzogICAgICAgICAgICAgJHN0YXRlLWRhbmdlci1iZztcbi8vICRhbGVydC1kYW5nZXItdGV4dDogICAgICAgICAgICRzdGF0ZS1kYW5nZXItdGV4dDtcbi8vICRhbGVydC1kYW5nZXItYm9yZGVyOiAgICAgICAgICRzdGF0ZS1kYW5nZXItYm9yZGVyO1xuXG5cbi8vIFByb2dyZXNzIGJhcnNcblxuLy8gJHByb2dyZXNzLWJnOiAgICAgICAgICAgICAgICAgI2Y1ZjVmNTtcbi8vICRwcm9ncmVzcy1iYXItY29sb3I6ICAgICAgICAgICNmZmY7XG4vLyAkcHJvZ3Jlc3MtYm9yZGVyLXJhZGl1czogICAgICAkYm9yZGVyLXJhZGl1cztcbi8vIFxuLy8gJHByb2dyZXNzLWJhci1iZzogICAgICAgICAgICAgJGJyYW5kLXByaW1hcnk7XG4vLyAkcHJvZ3Jlc3MtYmFyLXN1Y2Nlc3MtYmc6ICAgICAkYnJhbmQtc3VjY2Vzcztcbi8vICRwcm9ncmVzcy1iYXItd2FybmluZy1iZzogICAgICRicmFuZC13YXJuaW5nO1xuLy8gJHByb2dyZXNzLWJhci1kYW5nZXItYmc6ICAgICAgJGJyYW5kLWRhbmdlcjtcbi8vICRwcm9ncmVzcy1iYXItaW5mby1iZzogICAgICAgICRicmFuZC1pbmZvO1xuXG5cbi8vIExpc3QgZ3JvdXBcblxuLy8gJGxpc3QtZ3JvdXAtYmc6ICAgICAgICAgICAgICAgICAjZmZmO1xuLy8gJGxpc3QtZ3JvdXAtYm9yZGVyLWNvbG9yOiAgICAgICAjZGRkO1xuLy8gJGxpc3QtZ3JvdXAtYm9yZGVyLXdpZHRoOiAgICAgICAkYm9yZGVyLXdpZHRoO1xuLy8gJGxpc3QtZ3JvdXAtYm9yZGVyLXJhZGl1czogICAgICAkYm9yZGVyLXJhZGl1cztcbi8vIFxuLy8gJGxpc3QtZ3JvdXAtaG92ZXItYmc6ICAgICAgICAgICAjZjVmNWY1O1xuLy8gJGxpc3QtZ3JvdXAtYWN0aXZlLWNvbG9yOiAgICAgICAkY29tcG9uZW50LWFjdGl2ZS1jb2xvcjtcbi8vICRsaXN0LWdyb3VwLWFjdGl2ZS1iZzogICAgICAgICAgJGNvbXBvbmVudC1hY3RpdmUtYmc7XG4vLyAkbGlzdC1ncm91cC1hY3RpdmUtYm9yZGVyOiAgICAgICRsaXN0LWdyb3VwLWFjdGl2ZS1iZztcbi8vICRsaXN0LWdyb3VwLWFjdGl2ZS10ZXh0LWNvbG9yOiAgbGlnaHRlbigkbGlzdC1ncm91cC1hY3RpdmUtYmcsIDQwJSk7XG4vLyBcbi8vICRsaXN0LWdyb3VwLWRpc2FibGVkLWNvbG9yOiAgICAgICRncmF5LWxpZ2h0O1xuLy8gJGxpc3QtZ3JvdXAtZGlzYWJsZWQtYmc6ICAgICAgICAgJGdyYXktbGlnaHRlcjtcbi8vICRsaXN0LWdyb3VwLWRpc2FibGVkLXRleHQtY29sb3I6ICRsaXN0LWdyb3VwLWRpc2FibGVkLWNvbG9yO1xuLy8gXG4vLyAkbGlzdC1ncm91cC1saW5rLWNvbG9yOiAgICAgICAgICM1NTU7XG4vLyAkbGlzdC1ncm91cC1saW5rLWhvdmVyLWNvbG9yOiAgICRsaXN0LWdyb3VwLWxpbmstY29sb3I7XG4vLyAkbGlzdC1ncm91cC1saW5rLWhlYWRpbmctY29sb3I6ICMzMzM7XG5cblxuLy8gSW1hZ2UgdGh1bWJuYWlsc1xuXG4vLyAkdGh1bWJuYWlsLXBhZGRpbmc6ICAgICAgICAgICAuMjVyZW07XG4vLyAkdGh1bWJuYWlsLWJnOiAgICAgICAgICAgICAgICAkYm9keS1iZztcbi8vICR0aHVtYm5haWwtYm9yZGVyLXdpZHRoOiAgICAgICRib3JkZXItd2lkdGg7XG4vLyAkdGh1bWJuYWlsLWJvcmRlci1jb2xvcjogICAgICAjZGRkO1xuLy8gJHRodW1ibmFpbC1ib3JkZXItcmFkaXVzOiAgICAgJGJvcmRlci1yYWRpdXM7XG5cblxuLy8gQnJlYWRjcnVtYnNcblxuLy8gJGJyZWFkY3J1bWItcGFkZGluZy12ZXJ0aWNhbDogICAuNzVyZW07XG4vLyAkYnJlYWRjcnVtYi1wYWRkaW5nLWhvcml6b250YWw6IDFyZW07XG4vLyBcbi8vICRicmVhZGNydW1iLWJnOiAgICAgICAgICAgICAgICAgJGdyYXktbGlnaHRlcjtcbi8vICRicmVhZGNydW1iLWRpdmlkZXItY29sb3I6ICAgICAgJGdyYXktbGlnaHQ7XG4vLyAkYnJlYWRjcnVtYi1hY3RpdmUtY29sb3I6ICAgICAgICRncmF5LWxpZ2h0O1xuLy8gJGJyZWFkY3J1bWItZGl2aWRlcjogICAgICAgICAgICBcIi9cIjtcblxuXG4vLyBDYXJvdXNlbFxuXG4vLyAkY2Fyb3VzZWwtdGV4dC1zaGFkb3c6ICAgICAgICAgICAgICAgICAgICAgICAgMCAxcHggMnB4IHJnYmEoMCwwLDAsLjYpO1xuLy8gXG4vLyAkY2Fyb3VzZWwtY29udHJvbC1jb2xvcjogICAgICAgICAgICAgICAgICAgICAgI2ZmZjtcbi8vICRjYXJvdXNlbC1jb250cm9sLXdpZHRoOiAgICAgICAgICAgICAgICAgICAgICAxNSU7XG4vLyAkY2Fyb3VzZWwtY29udHJvbC1vcGFjaXR5OiAgICAgICAgICAgICAgICAgICAgLjU7XG4vLyAkY2Fyb3VzZWwtY29udHJvbC1mb250LXNpemU6ICAgICAgICAgICAgICAgICAgMjBweDtcbi8vIFxuLy8gJGNhcm91c2VsLWluZGljYXRvci1hY3RpdmUtYmc6ICAgICAgICAgICAgICAgICNmZmY7XG4vLyAkY2Fyb3VzZWwtaW5kaWNhdG9yLWJvcmRlci1jb2xvcjogICAgICAgICAgICAgI2ZmZjtcbi8vIFxuLy8gJGNhcm91c2VsLWNhcHRpb24tY29sb3I6ICAgICAgICAgICAgICAgICAgICAgICNmZmY7XG5cblxuLy8gQ2xvc2VcblxuLy8gJGNsb3NlLWZvbnQtd2VpZ2h0OiAgICAgICAgICAgYm9sZDtcbi8vICRjbG9zZS1jb2xvcjogICAgICAgICAgICAgICAgICMwMDA7XG4vLyAkY2xvc2UtdGV4dC1zaGFkb3c6ICAgICAgICAgICAwIDFweCAwICNmZmY7XG5cblxuLy8gQ29kZVxuXG4vLyAkY29kZS1jb2xvcjogICAgICAgICAgICAgICAgICAjYmQ0MTQ3O1xuLy8gJGNvZGUtYmc6ICAgICAgICAgICAgICAgICAgICAgI2Y3ZjdmOTtcbi8vIFxuLy8gJGtiZC1jb2xvcjogICAgICAgICAgICAgICAgICAgI2ZmZjtcbi8vICRrYmQtYmc6ICAgICAgICAgICAgICAgICAgICAgICMzMzM7XG4vLyBcbi8vICRwcmUtYmc6ICAgICAgICAgICAgICAgICAgICAgICNmN2Y3Zjk7XG4vLyAkcHJlLWNvbG9yOiAgICAgICAgICAgICAgICAgICAkZ3JheS1kYXJrO1xuLy8gJHByZS1ib3JkZXItY29sb3I6ICAgICAgICAgICAgI2NjYztcbi8vICRwcmUtc2Nyb2xsYWJsZS1tYXgtaGVpZ2h0OiAgIDM0MHB4O1xuIiwiLy9NaXhpbiB0byBhZGp1c3QgdGV4dCBpbiBjb2xsYXBzZWQgc2lkZSBwYW5lbCBhbmQgZGlzcGxheSB2ZXJ0aWNhbGx5XG5AbWl4aW4gSUVWZXJ0aWNhbFBhbmVsVGV4dHtcblx0LmNtcy1wYW5lbC1jb250ZW50LWNvbGxhcHNlZCB7XG5cdFx0cG9zaXRpb246cmVsYXRpdmU7XG5cdFx0d2lkdGg6IDQwcHg7XG5cdFx0aDIsIGgzIHtcblx0XHRcdCYuY21zLXBhbmVsLWhlYWRlciB7XG5cdFx0XHRcdHpvb206IDE7XG5cdFx0XHRcdHBvc2l0aW9uOmFic29sdXRlO1xuXHRcdFx0XHR0b3A6MTBweDtcblx0XHRcdFx0cmlnaHQ6MTBweDtcblx0XHRcdFx0d3JpdGluZy1tb2RlOiB0Yi1ybDtcblx0XHRcdFx0ZmxvYXQ6cmlnaHQ7XG5cdFx0XHRcdHotaW5kZXg6NTAwMDtcblx0XHRcdH1cblx0XHR9XG5cdH1cbn1cblxuXG4vL2ZpeCBmb3IgYmFja2dyb3VuZCBjb2xvcnMgb24gYnV0dG9uc1xuLmNtcyAuc3MtdWktYnV0dG9uIHtcblx0YmFja2dyb3VuZC1jb2xvcjogJGNvbG9yLWJ1dHRvbi1nZW5lcmljO1xuXHQmLnVpLXN0YXRlLWhvdmVyIHtcblx0XHRiYWNrZ3JvdW5kLWNvbG9yOmxpZ2h0ZW4oJGNvbG9yLWJ1dHRvbi1nZW5lcmljLCA1JSk7XG5cdH1cblx0Ji5zcy11aS1hY3Rpb24tY29uc3RydWN0aXZlIHtcblx0XHRiYWNrZ3JvdW5kLWNvbG9yOiRjb2xvci1idXR0b24tY29uc3RydWN0aXZlO1xuXHRcdCYudWktc3RhdGUtaG92ZXIge1xuXHRcdFx0YmFja2dyb3VuZC1jb2xvcjpsaWdodGVuKCRjb2xvci1idXR0b24tY29uc3RydWN0aXZlLCA1JSk7XG5cdFx0fVxuXHR9XG5cdCYuc3MtZ3JpZGZpZWxkLWJ1dHRvbi1maWx0ZXJ7XG5cdFx0JGJnSW1hZ2U6IHVybCguLi8uLi9pbWFnZXMvaWNvbnMvZmlsdGVyLWljb25zLnBuZykgbm8tcmVwZWF0O1xuXHRcdGJhY2tncm91bmQ6bGlnaHRlbigkY29sb3ItbWVudS1idXR0b24sMTAlKSAkYmdJbWFnZSAtMTRweCA0cHg7XG5cdH1cbn1cblxuLy9maXggZm9yIGJhY2tncm91bmQgY29sb3Igb24gZGVmYXVsdCB0YWJzXG4udWktc3RhdGUtZGVmYXVsdCxcbi51aS13aWRnZXQtY29udGVudCAudWktc3RhdGUtZGVmYXVsdCxcbi51aS13aWRnZXQtaGVhZGVyIC51aS1zdGF0ZS1kZWZhdWx0IHtcblx0YmFja2dyb3VuZC1pbWFnZTpub25lO1xufVxuXG4vL2ZpeCBmb3IgZmlsdGVyIGFuZCByZXNldCBpY29ucyBvbiBkYXRhZ3JpZFxuLnNzLWdyaWRmaWVsZC1idXR0b24tZmlsdGVyLnNzLXVpLWJ1dHRvbiB7XG5cdGJhY2tncm91bmQ6ICRjb2xvci1idXR0b24tZ2VuZXJpYyB1cmwoLi4vaW1hZ2VzL2ZpbHRlci1pY29ucy5wbmcpIG5vLXJlcGVhdCAtNDBweCA2cHg7XG5cdGZpbHRlcjpub25lO1xuXHQmLmhvdmVyLWFsaWtlOmFjdGl2ZSB7XG5cdFx0YmFja2dyb3VuZC1jb2xvcjogZGFya2VuKCMzMzhEQzEsIDUlKTtcblx0XHRiYWNrZ3JvdW5kLXBvc2l0aW9uOiAtMTVweCA3cHg7XG5cdFx0ZmlsdGVyOm5vbmU7XG5cdH1cblx0Ji5ob3Zlci1hbGlrZSB7XG5cdFx0YmFja2dyb3VuZC1jb2xvcjogICMzMzhEQzE7XG5cdFx0YmFja2dyb3VuZC1wb3NpdGlvbjogLTE2cHggNnB4O1xuXHRcdGZpbHRlcjpub25lO1xuXHR9XG59XG5cbi5zcy1ncmlkZmllbGQtYnV0dG9uLXJlc2V0LnNzLXVpLWJ1dHRvbiB7XG5cdGJhY2tncm91bmQ6ICRjb2xvci1idXR0b24tZ2VuZXJpYyB1cmwoLi4vaW1hZ2VzL2ZpbHRlci1pY29ucy5wbmcpIG5vLXJlcGVhdCA4cHggNXB4O1xuXHRmaWx0ZXI6bm9uZTtcblx0Ji5maWx0ZXJlZDpob3ZlciB7XG5cdFx0YmFja2dyb3VuZDogJGNvbG9yLWJ1dHRvbi1kZXN0cnVjdGl2ZSB1cmwoLi4vaW1hZ2VzL2ZpbHRlci1pY29ucy5wbmcpIG5vLXJlcGVhdCA4cHggLTE3cHg7XG5cdFx0ZmlsdGVyOm5vbmU7XG5cdH1cblx0Ji5maWx0ZXJlZDphY3RpdmUge1xuXHRcdGJhY2tncm91bmQ6IGRhcmtlbigkY29sb3ItYnV0dG9uLWRlc3RydWN0aXZlLCA1JSkgdXJsKC4uL2ltYWdlcy9maWx0ZXItaWNvbnMucG5nKSBuby1yZXBlYXQgOXB4IC0xNnB4O1xuXHRcdGZpbHRlcjpub25lO1xuXHR9XG59XG5cbi8vZml4IGZvciBib3JkZXJzIG9uIGdyaWRmaWVsZCB0YWJsZVxuLmNtcyB0YWJsZS5zcy1ncmlkZmllbGQtdGFibGUge1xuXHR0ciB7XG5cdFx0dGQge1xuXHRcdFx0Ym9yZGVyLXJpZ2h0OiAxcHggc29saWQgbGlnaHRlbigkY29sb3ItbWVkaXVtLXNlcGFyYXRvciwgMTAlKTtcblx0XHR9XG5cdFx0dGgge1xuXHRcdFx0Ym9yZGVyLXJpZ2h0OiAxcHggc29saWQgbGlnaHRlbigkY29sb3ItbWVkaXVtLXNlcGFyYXRvciwgMTAlKTtcblx0XHRcdCYubWFpbiB7XG5cdFx0XHRcdGJvcmRlci10b3A6IDFweCBzb2xpZCBsaWdodGVuKCRjb2xvci1tZWRpdW0tc2VwYXJhdG9yLCAxMCUpO1xuXHRcdFx0XHRib3JkZXItYm90dG9tOiBub25lO1xuXHRcdFx0fVxuXHRcdFx0Ji5leHRyYSB7XG5cdFx0XHRcdGJvcmRlci10b3A6IDFweCBzb2xpZCBsaWdodGVuKCRjb2xvci1tZWRpdW0tc2VwYXJhdG9yLCAxMCUpO1xuXHRcdFx0XHRwYWRkaW5nLXJpZ2h0OjEycHg7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cdHRkOmZpcnN0LWNoaWxkLCB0aDpmaXJzdC1jaGlsZCB7XG5cdFx0Ym9yZGVyLWxlZnQ6IDFweCBzb2xpZCBsaWdodGVuKCRjb2xvci1tZWRpdW0tc2VwYXJhdG9yLCAxMCUpO1xuXHR9XG59XG5cbi8vZml4IGZvciBlZGl0IGFuZCBkZWxldGUgaWNvbnMgLSBib3JkZXIgYXBwZWFycyBvbiBjbGljay5cbi5jbXMgLnNzLWdyaWRmaWVsZCB0YWJsZS5zcy1ncmlkZmllbGQtdGFibGUgdGJvZHkge1xuXHR0ZCB7XG5cdFx0YnV0dG9uIHtcblx0XHRcdGJvcmRlcjowO1xuXHRcdFx0YmFja2dyb3VuZDpub25lO1xuXHRcdH1cblx0fVxufVxuXG4vL2ZpeCBmb3Igd3JvbmcgYWxpZ25tZW50IG9mIGxhYmVsIG9uIHBhcmVudCBncm91cHMgZmllbGQgaW4gdXNlcnMgZ3JvdXBzXG4uY21zIC5jbXMtY29udGVudCAuY21zLWNvbnRlbnQtZmllbGRzIHtcblx0LmFsaWduZWRfcmlnaHRfbGFiZWwge1xuXHRcdG1hcmdpbi1sZWZ0OjA7XG5cdH1cbn1cblxuLmNtcy1tZW51LWxpc3QgbGkgYSAuaWNvbntcbiBmaWx0ZXI6bm9uZTtcbn1cblxuXG4vKipcbiAqIERFUFJFQ0FURUQ6XG4gKiAuY21zLWNvbnRlbnQtdG9vbHMgd2lsbCBiZSByZW1vdmVkIGluIDQuMFxuICogVXNlIC5jbXMtY29udGVudC1maWx0ZXJzIGluc3RlYWQuXG4gKlxuICogRml4IGZvciBtb2RlbCBhZG1pbiBmaWx0ZXIgc3R5bGluZ1xuICovXG4uTW9kZWxBZG1pbiAuY21zLWNvbnRlbnQtZmllbGRzIC5jbXMtY29udGVudC10b29scyAuY21zLXBhbmVsLWNvbnRlbnQge1xuXHQjRm9ybV9JbXBvcnRGb3JtIHtcblx0XHRkaXYuZmlsZSB7XG5cdFx0XHRtYXJnaW46MHB4O1xuXHRcdFx0aW5wdXQuZmlsZSB7XG5cdFx0XHRcdG1hcmdpbi1sZWZ0OiAtMTMycHg7IC8vaGlkZXMgdW5uZWNlc3NhcnkgdGV4dCBpbnB1dCBmaWVsZFxuXHRcdFx0fVxuXHRcdH1cblx0XHRkaXYuY2hlY2tib3gge1xuXHRcdFx0cGFkZGluZzowcHg7IC8vc3RvcHMgY2xlYXIgZGF0YWJhc2UgdGV4dCBmcm9tIG92ZXJmbG93aW5nIG9udG8gdHdvIGxpbmVzLlxuXHRcdH1cblx0fVxufVxuXG4uZmlsdGVyLWJ1dHRvbnN7XG5cdGJ1dHRvbntcblx0XHQmLnNzLWdyaWRmaWVsZC1idXR0b24tZmlsdGVye1xuXHRcdFx0YmFja2dyb3VuZC1wb3NpdGlvbjogLTE4cHggNHB4ICFpbXBvcnRhbnQ7XG5cdFx0fVxuXHR9XG59XG5cbi8qIEFsdGVybmF0aXZlIHN0eWxlcyBmb3IgdGhlIHN3aXRjaCBpbiBvbGQgSUUgKi9cbmZpZWxkc2V0LnN3aXRjaC1zdGF0ZXN7XG5cdHBhZGRpbmctcmlnaHQ6IDIwcHg7XG5cdC5zd2l0Y2h7XG5cdFx0cGFkZGluZzogMDtcblx0XHR3aWR0aDogMTAwJSszMjtcblx0XHRsZWZ0OiAtMzJweDtcblx0XHRsYWJlbHtcblx0XHRcdG92ZXJmbG93OnZpc2libGU7XG5cdFx0XHR0ZXh0LW92ZXJmbG93OnZpc2libGU7XG5cdFx0XHR3aGl0ZS1zcGFjZTpub3JtYWw7XG5cdFx0XHRwYWRkaW5nOjA7XG5cdFx0XHQmLmFjdGl2ZXtcblx0XHRcdFx0Y29sb3I6I2ZmZjtcblx0XHRcdFx0YmFja2dyb3VuZC1jb2xvcjogIzJiOWMzMjtcblx0XHRcdH1cblx0XHRcdHNwYW57XG5cdFx0XHRcdGRpc3BsYXk6aW5saW5lO1xuXHRcdFx0XHRwYWRkaW5nOjAgOHB4O1xuXHRcdFx0XHRvdmVyZmxvdzp2aXNpYmxlO1xuXHRcdFx0XHR0ZXh0LW92ZXJmbG93OnZpc2libGU7XG5cdFx0XHRcdHdoaXRlLXNwYWNlOndyYXA7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdC5zbGlkZS1idXR0b257XG5cdFx0XHRkaXNwbGF5Om5vbmU7XG5cdFx0fVxuXHRcdGlucHV0LnN0YXRlLW5hbWUge1xuXHRcdFx0bWFyZ2luLWxlZnQ6IC0yMHB4O1xuXHRcdH1cblx0fVxufVxuLyogSGlkZSBzaXplIGNvbnRyb2xzIGluIElFIC0gdGhleSB3b24ndCB3b3JrIGFzIGludGVuZGVkICovXG4uY21zLWNvbnRlbnQtY29udHJvbHN7XG5cdC5wcmV2aWV3LXNpemUtc2VsZWN0b3J7XG5cdFx0ZGlzcGxheTpub25lO1xuXHR9XG59XG4iLCJAaW1wb3J0ICd0aGVtZXMvZGVmYXVsdCc7XG5AaW1wb3J0ICdpZVNoYXJlZCc7XG5cblxuXG4vL0lFOCBuZWVkcyB0aGlzIGRlZmluZWQgaW5zaWRlIC5jbXMtcGFuZWxcbi5jbXMtcGFuZWwge1xuXHRAaW5jbHVkZSBJRVZlcnRpY2FsUGFuZWxUZXh0O1xufVxuXG4vL2ZpeCBmb3Igb3ZlcmxhcHBpbmcgb2YgdHJlZSB2aWV3IG1vZGUgY2hlY2tib3hlc1xuLmNtcy1jb250ZW50LXRvb2xiYXJ7XG5cdC5jbXMtdHJlZS12aWV3LW1vZGVze1xuXHRcdC5jaGVja2JveEFib3ZlVHJlZSB7XG5cdFx0XHRtYXJnaW4tcmlnaHQ6MXB4O1xuXHRcdH1cblx0fVxufVxuXG4vKipcbiAqIERFUFJFQ0FURUQ6XG4gKiAuY21zLWNvbnRlbnQtdG9vbHMgd2lsbCBiZSByZW1vdmVkIGluIDQuMFxuICogVXNlIC5jbXMtY29udGVudC1maWx0ZXJzIGluc3RlYWQuXG4gKi9cbi5jbXMgLmNtcy1jb250ZW50LXRvb2xzIHtcblxuXHQvL2ZpeCBmb3Igd2lkdGggb2YgZHJvcGRvd25zIGluIGZpbHRlciBwYW5lbFxuXHQuY21zLXBhbmVsLWNvbnRlbnQgLmRyb3Bkb3duIHNlbGVjdCB7XG5cdFx0d2lkdGg6MTUycHg7XG5cdH1cbn1cblxuLmZpbHRlci1idXR0b25ze1xuXHRidXR0b257XG5cdFx0d2lkdGg6MjNweCAhaW1wb3J0YW50O1xuXHRcdGhlaWdodDoyM3B4ICFpbXBvcnRhbnQ7XG5cdFx0Ji5zcy1ncmlkZmllbGQtYnV0dG9uLWNsb3Nle1xuXHRcdFx0bWFyZ2luLXJpZ2h0Oi03cHggIWltcG9ydGFudDtcblx0XHR9XG5cdH1cbn1cblxuLmNvbC1idXR0b25ze1xuXHR3aWR0aDoxOHB4O1xufVxuXG4vKiBmaXggZm9yIGFjdGlvbnMgYnV0dG9ucyBvbiBlZGl0IHBhZ2UgY29udGVudCBvdmVybGFwcGluZyAqL1xuLmNtcy1jb250ZW50LWFjdGlvbnMge1xuXHQuc3MtdWktYnV0dG9uc2V0IHtcblx0XHRidXR0b24ge1xuXHRcdFx0bWFyZ2luLXJpZ2h0OiAwO1xuXHRcdH1cblx0fVxufVxuXG4vLyBGaXggZm9yIGxhY2sgb2Ygc3VwcG9ydCBvZiA6bm90IHNlbGVjdG9yXG4vLyBBcHBsaWVkIHRvIHRyZWVzIHdoZW4gZGlzcGxheWluZyBmaWx0ZXIgLyBzZWFyY2ggcmVzdWx0cy5cbi50cmVlLWhvbGRlcixcbi5jbXMtdHJlZSB7XG5cdCYuZmlsdGVyZWQtbGlzdCBsaSB7XG5cdFx0PiBhLFxuXHRcdD4gYTpsaW5rIHtcblx0XHRcdGNvbG9yOiAkY29sb3ItdGV4dC1kaXNhYmxlZDtcblx0XHR9XG5cblx0XHQvLyBSZS1hcHBseSBkZWZhdWx0IHN0eWxlIHRvIGZpbHRlcmVkIGl0ZW1zXG5cdFx0Ji5maWx0ZXJlZC1pdGVtIHtcblx0XHRcdD4gYSxcblx0XHRcdD4gYTpsaW5rIHtcblx0XHRcdFx0Y29sb3I6ICRjb2xvci10ZXh0LWJsdWUtbGluaztcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBSZS1yZS1hcHBseSBkaXNhYmxlZCBzZWxlY3RvciBmcm9tIHRvcCBvZiBfdHJlZS5zY3NzXG5cdFx0Ji5kaXNhYmxlZCxcblx0XHQmLmVkaXQtZGlzYWJsZWQge1xuXHRcdFx0PiBhLFxuXHRcdFx0PiBhOmxpbmsge1xuXHRcdFx0XHRjb2xvcjogJGNvbG9yLXRleHQtZGlzYWJsZWQ7XG5cdFx0XHRcdGJhY2tncm91bmQ6IHRyYW5zcGFyZW50IG5vbmU7XG5cdFx0XHRcdGN1cnNvcjogZGVmYXVsdDtcblx0XHRcdH1cblx0XHR9XG5cdH1cbn1cbiJdLCJzb3VyY2VSb290IjoiL3NvdXJjZS8ifQ== */
